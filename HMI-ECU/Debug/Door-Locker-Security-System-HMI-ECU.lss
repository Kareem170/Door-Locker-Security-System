
Door-Locker-Security-System-HMI-ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000343a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  0000343a  000034ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080019c  0080019c  0000360a  2**0
                  ALLOC
  3 .stab         00003108  00000000  00000000  0000360c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017cd  00000000  00000000  00006714  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008021  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008191  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009dda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000acc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ba74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bbd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000be61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c62f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 37 0d 	jmp	0x1a6e	; 0x1a6e <__vector_3>
      10:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <__vector_8>
      24:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <main>
      8a:	0c 94 1b 1a 	jmp	0x3436	; 0x3436 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e8       	ldi	r26, 0x8C	; 140
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c e8       	ldi	r24, 0x8C	; 140
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 af 19 	jmp	0x335e	; 0x335e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HMI_Adjust_And_Display_Password>:
 *******************************************************************************/

/*
 * Description : Take the password form keypad and display '*' on the screen to hide password
 */
void HMI_Adjust_And_Display_Password(uint8* password){
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	6f 97       	sbiw	r28, 0x1f	; 31
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	9f 8f       	std	Y+31, r25	; 0x1f
     b60:	8e 8f       	std	Y+30, r24	; 0x1e

	for(uint8 i= 0; i <PASSWORD_LENGTH ;i++)
     b62:	1d 8e       	std	Y+29, r1	; 0x1d
     b64:	8b c0       	rjmp	.+278    	; 0xc7c <HMI_Adjust_And_Display_Password+0x136>
	{
		/* get The Pressed Key into The Password Buffer */
		password[i] = KEYPAD_getPressedKey();
     b66:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b68:	28 2f       	mov	r18, r24
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b6e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b70:	8c 01       	movw	r16, r24
     b72:	02 0f       	add	r16, r18
     b74:	13 1f       	adc	r17, r19
     b76:	0e 94 72 12 	call	0x24e4	; 0x24e4 <KEYPAD_getPressedKey>
     b7a:	f8 01       	movw	r30, r16
     b7c:	80 83       	st	Z, r24

		/* Display '*' on the screen */
		LCD_moveCursor(1,i+12);
     b7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b80:	98 2f       	mov	r25, r24
     b82:	94 5f       	subi	r25, 0xF4	; 244
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	69 2f       	mov	r22, r25
     b88:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LCD_moveCursor>
		LCD_displayCharacter('*');
     b8c:	8a e2       	ldi	r24, 0x2A	; 42
     b8e:	0e 94 81 15 	call	0x2b02	; 0x2b02 <LCD_displayCharacter>
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	aa ef       	ldi	r26, 0xFA	; 250
     b98:	b3 e4       	ldi	r27, 0x43	; 67
     b9a:	89 8f       	std	Y+25, r24	; 0x19
     b9c:	9a 8f       	std	Y+26, r25	; 0x1a
     b9e:	ab 8f       	std	Y+27, r26	; 0x1b
     ba0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba2:	69 8d       	ldd	r22, Y+25	; 0x19
     ba4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ba6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ba8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	4a ef       	ldi	r20, 0xFA	; 250
     bb0:	54 e4       	ldi	r21, 0x44	; 68
     bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb6:	dc 01       	movw	r26, r24
     bb8:	cb 01       	movw	r24, r22
     bba:	8d 8b       	std	Y+21, r24	; 0x15
     bbc:	9e 8b       	std	Y+22, r25	; 0x16
     bbe:	af 8b       	std	Y+23, r26	; 0x17
     bc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bc2:	6d 89       	ldd	r22, Y+21	; 0x15
     bc4:	7e 89       	ldd	r23, Y+22	; 0x16
     bc6:	8f 89       	ldd	r24, Y+23	; 0x17
     bc8:	98 8d       	ldd	r25, Y+24	; 0x18
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	40 e8       	ldi	r20, 0x80	; 128
     bd0:	5f e3       	ldi	r21, 0x3F	; 63
     bd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bd6:	88 23       	and	r24, r24
     bd8:	2c f4       	brge	.+10     	; 0xbe4 <HMI_Adjust_And_Display_Password+0x9e>
		__ticks = 1;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	9c 8b       	std	Y+20, r25	; 0x14
     be0:	8b 8b       	std	Y+19, r24	; 0x13
     be2:	3f c0       	rjmp	.+126    	; 0xc62 <HMI_Adjust_And_Display_Password+0x11c>
	else if (__tmp > 65535)
     be4:	6d 89       	ldd	r22, Y+21	; 0x15
     be6:	7e 89       	ldd	r23, Y+22	; 0x16
     be8:	8f 89       	ldd	r24, Y+23	; 0x17
     bea:	98 8d       	ldd	r25, Y+24	; 0x18
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	4f e7       	ldi	r20, 0x7F	; 127
     bf2:	57 e4       	ldi	r21, 0x47	; 71
     bf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf8:	18 16       	cp	r1, r24
     bfa:	4c f5       	brge	.+82     	; 0xc4e <HMI_Adjust_And_Display_Password+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bfc:	69 8d       	ldd	r22, Y+25	; 0x19
     bfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c00:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c02:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e2       	ldi	r20, 0x20	; 32
     c0a:	51 e4       	ldi	r21, 0x41	; 65
     c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	bc 01       	movw	r22, r24
     c16:	cd 01       	movw	r24, r26
     c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	9c 8b       	std	Y+20, r25	; 0x14
     c22:	8b 8b       	std	Y+19, r24	; 0x13
     c24:	0f c0       	rjmp	.+30     	; 0xc44 <HMI_Adjust_And_Display_Password+0xfe>
     c26:	88 ec       	ldi	r24, 0xC8	; 200
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	9a 8b       	std	Y+18, r25	; 0x12
     c2c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c2e:	89 89       	ldd	r24, Y+17	; 0x11
     c30:	9a 89       	ldd	r25, Y+18	; 0x12
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <HMI_Adjust_And_Display_Password+0xec>
     c36:	9a 8b       	std	Y+18, r25	; 0x12
     c38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c3a:	8b 89       	ldd	r24, Y+19	; 0x13
     c3c:	9c 89       	ldd	r25, Y+20	; 0x14
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	9c 8b       	std	Y+20, r25	; 0x14
     c42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c44:	8b 89       	ldd	r24, Y+19	; 0x13
     c46:	9c 89       	ldd	r25, Y+20	; 0x14
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	69 f7       	brne	.-38     	; 0xc26 <HMI_Adjust_And_Display_Password+0xe0>
     c4c:	14 c0       	rjmp	.+40     	; 0xc76 <HMI_Adjust_And_Display_Password+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c4e:	6d 89       	ldd	r22, Y+21	; 0x15
     c50:	7e 89       	ldd	r23, Y+22	; 0x16
     c52:	8f 89       	ldd	r24, Y+23	; 0x17
     c54:	98 8d       	ldd	r25, Y+24	; 0x18
     c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5a:	dc 01       	movw	r26, r24
     c5c:	cb 01       	movw	r24, r22
     c5e:	9c 8b       	std	Y+20, r25	; 0x14
     c60:	8b 8b       	std	Y+19, r24	; 0x13
     c62:	8b 89       	ldd	r24, Y+19	; 0x13
     c64:	9c 89       	ldd	r25, Y+20	; 0x14
     c66:	98 8b       	std	Y+16, r25	; 0x10
     c68:	8f 87       	std	Y+15, r24	; 0x0f
     c6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c6c:	98 89       	ldd	r25, Y+16	; 0x10
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	f1 f7       	brne	.-4      	; 0xc6e <HMI_Adjust_And_Display_Password+0x128>
     c72:	98 8b       	std	Y+16, r25	; 0x10
     c74:	8f 87       	std	Y+15, r24	; 0x0f
/*
 * Description : Take the password form keypad and display '*' on the screen to hide password
 */
void HMI_Adjust_And_Display_Password(uint8* password){

	for(uint8 i= 0; i <PASSWORD_LENGTH ;i++)
     c76:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c78:	8f 5f       	subi	r24, 0xFF	; 255
     c7a:	8d 8f       	std	Y+29, r24	; 0x1d
     c7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c7e:	85 30       	cpi	r24, 0x05	; 5
     c80:	08 f4       	brcc	.+2      	; 0xc84 <HMI_Adjust_And_Display_Password+0x13e>
     c82:	71 cf       	rjmp	.-286    	; 0xb66 <HMI_Adjust_And_Display_Password+0x20>

		/* This delay to give chance to take the pressed key in the next iteration */
		_delay_ms(500);
	}
	/* Polling Untill Enter Key is Pressed */
	while( KEYPAD_getPressedKey() != Enter_Key){}
     c84:	0e 94 72 12 	call	0x24e4	; 0x24e4 <KEYPAD_getPressedKey>
     c88:	8d 30       	cpi	r24, 0x0D	; 13
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <HMI_Adjust_And_Display_Password+0x13e>
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	aa ef       	ldi	r26, 0xFA	; 250
     c92:	b3 e4       	ldi	r27, 0x43	; 67
     c94:	8b 87       	std	Y+11, r24	; 0x0b
     c96:	9c 87       	std	Y+12, r25	; 0x0c
     c98:	ad 87       	std	Y+13, r26	; 0x0d
     c9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     c9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	4a ef       	ldi	r20, 0xFA	; 250
     caa:	54 e4       	ldi	r21, 0x44	; 68
     cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	8f 83       	std	Y+7, r24	; 0x07
     cb6:	98 87       	std	Y+8, r25	; 0x08
     cb8:	a9 87       	std	Y+9, r26	; 0x09
     cba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cbc:	6f 81       	ldd	r22, Y+7	; 0x07
     cbe:	78 85       	ldd	r23, Y+8	; 0x08
     cc0:	89 85       	ldd	r24, Y+9	; 0x09
     cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	40 e8       	ldi	r20, 0x80	; 128
     cca:	5f e3       	ldi	r21, 0x3F	; 63
     ccc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cd0:	88 23       	and	r24, r24
     cd2:	2c f4       	brge	.+10     	; 0xcde <HMI_Adjust_And_Display_Password+0x198>
		__ticks = 1;
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	9e 83       	std	Y+6, r25	; 0x06
     cda:	8d 83       	std	Y+5, r24	; 0x05
     cdc:	3f c0       	rjmp	.+126    	; 0xd5c <HMI_Adjust_And_Display_Password+0x216>
	else if (__tmp > 65535)
     cde:	6f 81       	ldd	r22, Y+7	; 0x07
     ce0:	78 85       	ldd	r23, Y+8	; 0x08
     ce2:	89 85       	ldd	r24, Y+9	; 0x09
     ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	3f ef       	ldi	r19, 0xFF	; 255
     cea:	4f e7       	ldi	r20, 0x7F	; 127
     cec:	57 e4       	ldi	r21, 0x47	; 71
     cee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cf2:	18 16       	cp	r1, r24
     cf4:	4c f5       	brge	.+82     	; 0xd48 <HMI_Adjust_And_Display_Password+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf6:	6b 85       	ldd	r22, Y+11	; 0x0b
     cf8:	7c 85       	ldd	r23, Y+12	; 0x0c
     cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
     cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e2       	ldi	r20, 0x20	; 32
     d04:	51 e4       	ldi	r21, 0x41	; 65
     d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	bc 01       	movw	r22, r24
     d10:	cd 01       	movw	r24, r26
     d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	9e 83       	std	Y+6, r25	; 0x06
     d1c:	8d 83       	std	Y+5, r24	; 0x05
     d1e:	0f c0       	rjmp	.+30     	; 0xd3e <HMI_Adjust_And_Display_Password+0x1f8>
     d20:	88 ec       	ldi	r24, 0xC8	; 200
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	9c 83       	std	Y+4, r25	; 0x04
     d26:	8b 83       	std	Y+3, r24	; 0x03
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	9c 81       	ldd	r25, Y+4	; 0x04
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <HMI_Adjust_And_Display_Password+0x1e6>
     d30:	9c 83       	std	Y+4, r25	; 0x04
     d32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d34:	8d 81       	ldd	r24, Y+5	; 0x05
     d36:	9e 81       	ldd	r25, Y+6	; 0x06
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	9e 83       	std	Y+6, r25	; 0x06
     d3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d3e:	8d 81       	ldd	r24, Y+5	; 0x05
     d40:	9e 81       	ldd	r25, Y+6	; 0x06
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	69 f7       	brne	.-38     	; 0xd20 <HMI_Adjust_And_Display_Password+0x1da>
     d46:	14 c0       	rjmp	.+40     	; 0xd70 <HMI_Adjust_And_Display_Password+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d48:	6f 81       	ldd	r22, Y+7	; 0x07
     d4a:	78 85       	ldd	r23, Y+8	; 0x08
     d4c:	89 85       	ldd	r24, Y+9	; 0x09
     d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	9e 83       	std	Y+6, r25	; 0x06
     d5a:	8d 83       	std	Y+5, r24	; 0x05
     d5c:	8d 81       	ldd	r24, Y+5	; 0x05
     d5e:	9e 81       	ldd	r25, Y+6	; 0x06
     d60:	9a 83       	std	Y+2, r25	; 0x02
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	9a 81       	ldd	r25, Y+2	; 0x02
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <HMI_Adjust_And_Display_Password+0x222>
     d6c:	9a 83       	std	Y+2, r25	; 0x02
     d6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
     d70:	6f 96       	adiw	r28, 0x1f	; 31
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	08 95       	ret

00000d86 <Send_Password_To_ControlECU>:

/*
 * Description : this function send the password to control ECU if it is ready to receive
 */
void Send_Password_To_ControlECU(const uint8* password)
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <Send_Password_To_ControlECU+0x6>
     d8c:	0f 92       	push	r0
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	9b 83       	std	Y+3, r25	; 0x03
     d94:	8a 83       	std	Y+2, r24	; 0x02
	/* Send dummy byte to tell controlECU that HMI ECU is ready */
	UART_sendByte(HMI_ECU_READY);
     d96:	80 e2       	ldi	r24, 0x20	; 32
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <UART_sendByte>

	 /* Wait until Control ECU reply that it is ready to receive password */
	 while(UART_recieveByte()!= CONTROL_ECU_READY);
     d9e:	0e 94 00 19 	call	0x3200	; 0x3200 <UART_recieveByte>
     da2:	80 31       	cpi	r24, 0x10	; 16
     da4:	e1 f7       	brne	.-8      	; 0xd9e <Send_Password_To_ControlECU+0x18>

	/* Send password to control ECU by UART driver byte by byte */
	for(uint8 i  = 0;i <PASSWORD_LENGTH;i ++)
     da6:	19 82       	std	Y+1, r1	; 0x01
     da8:	10 c0       	rjmp	.+32     	; 0xdca <Send_Password_To_ControlECU+0x44>
	{
		UART_sendByte(password[i]);
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	9b 81       	ldd	r25, Y+3	; 0x03
     db4:	fc 01       	movw	r30, r24
     db6:	e2 0f       	add	r30, r18
     db8:	f3 1f       	adc	r31, r19
     dba:	80 81       	ld	r24, Z
     dbc:	88 2f       	mov	r24, r24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <UART_sendByte>

	 /* Wait until Control ECU reply that it is ready to receive password */
	 while(UART_recieveByte()!= CONTROL_ECU_READY);

	/* Send password to control ECU by UART driver byte by byte */
	for(uint8 i  = 0;i <PASSWORD_LENGTH;i ++)
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	8f 5f       	subi	r24, 0xFF	; 255
     dc8:	89 83       	std	Y+1, r24	; 0x01
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	85 30       	cpi	r24, 0x05	; 5
     dce:	68 f3       	brcs	.-38     	; 0xdaa <Send_Password_To_ControlECU+0x24>
	{
		UART_sendByte(password[i]);
	}
}
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <Display_EnterPassword>:
 * Description : Asks user to enter password then send the 2 passwords
   to control ECU to check if they match or not At the beginning of the program
*/

void Display_EnterPassword(uint8* first_password,uint8* second_password)
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	00 d0       	rcall	.+0      	; 0xde2 <Display_EnterPassword+0x6>
     de2:	00 d0       	rcall	.+0      	; 0xde4 <Display_EnterPassword+0x8>
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	9a 83       	std	Y+2, r25	; 0x02
     dea:	89 83       	std	Y+1, r24	; 0x01
     dec:	7c 83       	std	Y+4, r23	; 0x04
     dee:	6b 83       	std	Y+3, r22	; 0x03
	/* Take first password */
	LCD_clearScreen();
     df0:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_clearScreen>
	LCD_moveCursor(0,3);
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	63 e0       	ldi	r22, 0x03	; 3
     df8:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LCD_moveCursor>
	LCD_displayString((uint8*)"Please Enter The Password");
     dfc:	80 e6       	ldi	r24, 0x60	; 96
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 75 17 	call	0x2eea	; 0x2eea <LCD_displayString>
	/* Display '*' on the screen*/
	HMI_Adjust_And_Display_Password(first_password);
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	9a 81       	ldd	r25, Y+2	; 0x02
     e08:	0e 94 a3 05 	call	0xb46	; 0xb46 <HMI_Adjust_And_Display_Password>


	/* Take first password */
	LCD_clearScreen();
     e0c:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_clearScreen>
	LCD_moveCursor(0,3);
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	63 e0       	ldi	r22, 0x03	; 3
     e14:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LCD_moveCursor>
	LCD_displayString((uint8*)"Please Re-Enter The Password");
     e18:	8a e7       	ldi	r24, 0x7A	; 122
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 75 17 	call	0x2eea	; 0x2eea <LCD_displayString>
	/* Display '*' on the screen*/
	HMI_Adjust_And_Display_Password(second_password);
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	9c 81       	ldd	r25, Y+4	; 0x04
     e24:	0e 94 a3 05 	call	0xb46	; 0xb46 <HMI_Adjust_And_Display_Password>
	LCD_clearScreen();
     e28:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_clearScreen>

	/* Send Passwords to control ECU */
	Send_Password_To_ControlECU(first_password);
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	9a 81       	ldd	r25, Y+2	; 0x02
     e30:	0e 94 c3 06 	call	0xd86	; 0xd86 <Send_Password_To_ControlECU>
	Send_Password_To_ControlECU(second_password);
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	9c 81       	ldd	r25, Y+4	; 0x04
     e38:	0e 94 c3 06 	call	0xd86	; 0xd86 <Send_Password_To_ControlECU>
}
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <displayUserOptions>:
/**************************************************************************************/

/*
 * Description : display the options menu which the user will choose from it (Open door / Change Password)
 */
void displayUserOptions(void){
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     e52:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_clearScreen>
	LCD_moveCursor(0,4);
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	64 e0       	ldi	r22, 0x04	; 4
     e5a:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LCD_moveCursor>
	LCD_displayString((uint8*)"(+): Open Door");
     e5e:	87 e9       	ldi	r24, 0x97	; 151
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 75 17 	call	0x2eea	; 0x2eea <LCD_displayString>

	LCD_moveCursor(1,4);
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	64 e0       	ldi	r22, 0x04	; 4
     e6a:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LCD_moveCursor>
	LCD_displayString((uint8*)"(-): Change Password");
     e6e:	86 ea       	ldi	r24, 0xA6	; 166
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 75 17 	call	0x2eea	; 0x2eea <LCD_displayString>
}
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <Display_EnterPassword_AndCheckStatus>:
/**************************************************************************************/
/*
 * Description : this function takes two passwords , check if they are matched or not
				and display the result on LCD
*/
void Display_EnterPassword_AndCheckStatus(uint8* first_password,uint8* second_password){
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	a0 97       	sbiw	r28, 0x20	; 32
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	9e 8f       	std	Y+30, r25	; 0x1e
     e92:	8d 8f       	std	Y+29, r24	; 0x1d
     e94:	78 a3       	std	Y+32, r23	; 0x20
     e96:	6f 8f       	std	Y+31, r22	; 0x1f
	/*	This loop doesn't terminate until the write password Entered*/
	while(1)
	{
		/* First Ask User To Enter Password */
		Display_EnterPassword(first_password,second_password);
     e98:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e9c:	2f 8d       	ldd	r18, Y+31	; 0x1f
     e9e:	38 a1       	ldd	r19, Y+32	; 0x20
     ea0:	b9 01       	movw	r22, r18
     ea2:	0e 94 ee 06 	call	0xddc	; 0xddc <Display_EnterPassword>

		/* Control ECU Will Check Status Of these 2 Passwords (Matching or not)*/
		status = recievePasswordStatus();
     ea6:	0e 94 af 0b 	call	0x175e	; 0x175e <recievePasswordStatus>
     eaa:	80 93 a3 01 	sts	0x01A3, r24

		if(status == PASSWORD_MATCH)
     eae:	80 91 a3 01 	lds	r24, 0x01A3
     eb2:	81 31       	cpi	r24, 0x11	; 17
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <Display_EnterPassword_AndCheckStatus+0x3c>
     eb6:	7d c0       	rjmp	.+250    	; 0xfb2 <Display_EnterPassword_AndCheckStatus+0x136>
		{
			LCD_clearScreen();
     eb8:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_clearScreen>
			LCD_moveCursor(0,4);
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	64 e0       	ldi	r22, 0x04	; 4
     ec0:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LCD_moveCursor>
			LCD_displayString((uint8*)"Correct Password");
     ec4:	8b eb       	ldi	r24, 0xBB	; 187
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 75 17 	call	0x2eea	; 0x2eea <LCD_displayString>
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	aa ef       	ldi	r26, 0xFA	; 250
     ed2:	b3 e4       	ldi	r27, 0x43	; 67
     ed4:	89 8f       	std	Y+25, r24	; 0x19
     ed6:	9a 8f       	std	Y+26, r25	; 0x1a
     ed8:	ab 8f       	std	Y+27, r26	; 0x1b
     eda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     edc:	69 8d       	ldd	r22, Y+25	; 0x19
     ede:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ee0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ee2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	4a ef       	ldi	r20, 0xFA	; 250
     eea:	54 e4       	ldi	r21, 0x44	; 68
     eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	8d 8b       	std	Y+21, r24	; 0x15
     ef6:	9e 8b       	std	Y+22, r25	; 0x16
     ef8:	af 8b       	std	Y+23, r26	; 0x17
     efa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     efc:	6d 89       	ldd	r22, Y+21	; 0x15
     efe:	7e 89       	ldd	r23, Y+22	; 0x16
     f00:	8f 89       	ldd	r24, Y+23	; 0x17
     f02:	98 8d       	ldd	r25, Y+24	; 0x18
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	40 e8       	ldi	r20, 0x80	; 128
     f0a:	5f e3       	ldi	r21, 0x3F	; 63
     f0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f10:	88 23       	and	r24, r24
     f12:	2c f4       	brge	.+10     	; 0xf1e <Display_EnterPassword_AndCheckStatus+0xa2>
		__ticks = 1;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	9c 8b       	std	Y+20, r25	; 0x14
     f1a:	8b 8b       	std	Y+19, r24	; 0x13
     f1c:	3f c0       	rjmp	.+126    	; 0xf9c <Display_EnterPassword_AndCheckStatus+0x120>
	else if (__tmp > 65535)
     f1e:	6d 89       	ldd	r22, Y+21	; 0x15
     f20:	7e 89       	ldd	r23, Y+22	; 0x16
     f22:	8f 89       	ldd	r24, Y+23	; 0x17
     f24:	98 8d       	ldd	r25, Y+24	; 0x18
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	3f ef       	ldi	r19, 0xFF	; 255
     f2a:	4f e7       	ldi	r20, 0x7F	; 127
     f2c:	57 e4       	ldi	r21, 0x47	; 71
     f2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f32:	18 16       	cp	r1, r24
     f34:	4c f5       	brge	.+82     	; 0xf88 <Display_EnterPassword_AndCheckStatus+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f36:	69 8d       	ldd	r22, Y+25	; 0x19
     f38:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e2       	ldi	r20, 0x20	; 32
     f44:	51 e4       	ldi	r21, 0x41	; 65
     f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	bc 01       	movw	r22, r24
     f50:	cd 01       	movw	r24, r26
     f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	9c 8b       	std	Y+20, r25	; 0x14
     f5c:	8b 8b       	std	Y+19, r24	; 0x13
     f5e:	0f c0       	rjmp	.+30     	; 0xf7e <Display_EnterPassword_AndCheckStatus+0x102>
     f60:	88 ec       	ldi	r24, 0xC8	; 200
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	9a 8b       	std	Y+18, r25	; 0x12
     f66:	89 8b       	std	Y+17, r24	; 0x11
     f68:	89 89       	ldd	r24, Y+17	; 0x11
     f6a:	9a 89       	ldd	r25, Y+18	; 0x12
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <Display_EnterPassword_AndCheckStatus+0xf0>
     f70:	9a 8b       	std	Y+18, r25	; 0x12
     f72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f74:	8b 89       	ldd	r24, Y+19	; 0x13
     f76:	9c 89       	ldd	r25, Y+20	; 0x14
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	9c 8b       	std	Y+20, r25	; 0x14
     f7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7e:	8b 89       	ldd	r24, Y+19	; 0x13
     f80:	9c 89       	ldd	r25, Y+20	; 0x14
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	69 f7       	brne	.-38     	; 0xf60 <Display_EnterPassword_AndCheckStatus+0xe4>
     f86:	92 c0       	rjmp	.+292    	; 0x10ac <Display_EnterPassword_AndCheckStatus+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f88:	6d 89       	ldd	r22, Y+21	; 0x15
     f8a:	7e 89       	ldd	r23, Y+22	; 0x16
     f8c:	8f 89       	ldd	r24, Y+23	; 0x17
     f8e:	98 8d       	ldd	r25, Y+24	; 0x18
     f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	9c 8b       	std	Y+20, r25	; 0x14
     f9a:	8b 8b       	std	Y+19, r24	; 0x13
     f9c:	8b 89       	ldd	r24, Y+19	; 0x13
     f9e:	9c 89       	ldd	r25, Y+20	; 0x14
     fa0:	98 8b       	std	Y+16, r25	; 0x10
     fa2:	8f 87       	std	Y+15, r24	; 0x0f
     fa4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fa6:	98 89       	ldd	r25, Y+16	; 0x10
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <Display_EnterPassword_AndCheckStatus+0x12c>
     fac:	98 8b       	std	Y+16, r25	; 0x10
     fae:	8f 87       	std	Y+15, r24	; 0x0f
     fb0:	7d c0       	rjmp	.+250    	; 0x10ac <Display_EnterPassword_AndCheckStatus+0x230>
			break;
		}
		else
		{
			/* Stay in While loop if 2 Passwords doesn't match */
			LCD_clearScreen();
     fb2:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_clearScreen>
			LCD_moveCursor(0,4);
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	64 e0       	ldi	r22, 0x04	; 4
     fba:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LCD_moveCursor>
			LCD_displayString((uint8*)"In Correct Password");
     fbe:	8c ec       	ldi	r24, 0xCC	; 204
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 75 17 	call	0x2eea	; 0x2eea <LCD_displayString>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	aa ef       	ldi	r26, 0xFA	; 250
     fcc:	b3 e4       	ldi	r27, 0x43	; 67
     fce:	8b 87       	std	Y+11, r24	; 0x0b
     fd0:	9c 87       	std	Y+12, r25	; 0x0c
     fd2:	ad 87       	std	Y+13, r26	; 0x0d
     fd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fda:	8d 85       	ldd	r24, Y+13	; 0x0d
     fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	4a ef       	ldi	r20, 0xFA	; 250
     fe4:	54 e4       	ldi	r21, 0x44	; 68
     fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	8f 83       	std	Y+7, r24	; 0x07
     ff0:	98 87       	std	Y+8, r25	; 0x08
     ff2:	a9 87       	std	Y+9, r26	; 0x09
     ff4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ff6:	6f 81       	ldd	r22, Y+7	; 0x07
     ff8:	78 85       	ldd	r23, Y+8	; 0x08
     ffa:	89 85       	ldd	r24, Y+9	; 0x09
     ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e8       	ldi	r20, 0x80	; 128
    1004:	5f e3       	ldi	r21, 0x3F	; 63
    1006:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    100a:	88 23       	and	r24, r24
    100c:	2c f4       	brge	.+10     	; 0x1018 <Display_EnterPassword_AndCheckStatus+0x19c>
		__ticks = 1;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	9e 83       	std	Y+6, r25	; 0x06
    1014:	8d 83       	std	Y+5, r24	; 0x05
    1016:	3f c0       	rjmp	.+126    	; 0x1096 <Display_EnterPassword_AndCheckStatus+0x21a>
	else if (__tmp > 65535)
    1018:	6f 81       	ldd	r22, Y+7	; 0x07
    101a:	78 85       	ldd	r23, Y+8	; 0x08
    101c:	89 85       	ldd	r24, Y+9	; 0x09
    101e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	3f ef       	ldi	r19, 0xFF	; 255
    1024:	4f e7       	ldi	r20, 0x7F	; 127
    1026:	57 e4       	ldi	r21, 0x47	; 71
    1028:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    102c:	18 16       	cp	r1, r24
    102e:	4c f5       	brge	.+82     	; 0x1082 <Display_EnterPassword_AndCheckStatus+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1030:	6b 85       	ldd	r22, Y+11	; 0x0b
    1032:	7c 85       	ldd	r23, Y+12	; 0x0c
    1034:	8d 85       	ldd	r24, Y+13	; 0x0d
    1036:	9e 85       	ldd	r25, Y+14	; 0x0e
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e2       	ldi	r20, 0x20	; 32
    103e:	51 e4       	ldi	r21, 0x41	; 65
    1040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	bc 01       	movw	r22, r24
    104a:	cd 01       	movw	r24, r26
    104c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	9e 83       	std	Y+6, r25	; 0x06
    1056:	8d 83       	std	Y+5, r24	; 0x05
    1058:	0f c0       	rjmp	.+30     	; 0x1078 <Display_EnterPassword_AndCheckStatus+0x1fc>
    105a:	88 ec       	ldi	r24, 0xC8	; 200
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	9c 83       	std	Y+4, r25	; 0x04
    1060:	8b 83       	std	Y+3, r24	; 0x03
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	9c 81       	ldd	r25, Y+4	; 0x04
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	f1 f7       	brne	.-4      	; 0x1066 <Display_EnterPassword_AndCheckStatus+0x1ea>
    106a:	9c 83       	std	Y+4, r25	; 0x04
    106c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	9e 83       	std	Y+6, r25	; 0x06
    1076:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1078:	8d 81       	ldd	r24, Y+5	; 0x05
    107a:	9e 81       	ldd	r25, Y+6	; 0x06
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	69 f7       	brne	.-38     	; 0x105a <Display_EnterPassword_AndCheckStatus+0x1de>
    1080:	0b cf       	rjmp	.-490    	; 0xe98 <Display_EnterPassword_AndCheckStatus+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1082:	6f 81       	ldd	r22, Y+7	; 0x07
    1084:	78 85       	ldd	r23, Y+8	; 0x08
    1086:	89 85       	ldd	r24, Y+9	; 0x09
    1088:	9a 85       	ldd	r25, Y+10	; 0x0a
    108a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	9e 83       	std	Y+6, r25	; 0x06
    1094:	8d 83       	std	Y+5, r24	; 0x05
    1096:	8d 81       	ldd	r24, Y+5	; 0x05
    1098:	9e 81       	ldd	r25, Y+6	; 0x06
    109a:	9a 83       	std	Y+2, r25	; 0x02
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	9a 81       	ldd	r25, Y+2	; 0x02
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	f1 f7       	brne	.-4      	; 0x10a2 <Display_EnterPassword_AndCheckStatus+0x226>
    10a6:	9a 83       	std	Y+2, r25	; 0x02
    10a8:	89 83       	std	Y+1, r24	; 0x01
    10aa:	f6 ce       	rjmp	.-532    	; 0xe98 <Display_EnterPassword_AndCheckStatus+0x1c>
			_delay_ms(500);
		}
	}
}
    10ac:	a0 96       	adiw	r28, 0x20	; 32
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <UserOptions>:

/*************************************************************************************/
/*
 * Description : Display the main options ,then send the option to the control ECU.
*/
void UserOptions(uint8* a_first_password,uint8* a_second_password){
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	cc 54       	subi	r28, 0x4C	; 76
    10cc:	d0 40       	sbci	r29, 0x00	; 0
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	fe 01       	movw	r30, r28
    10da:	e9 5b       	subi	r30, 0xB9	; 185
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	91 83       	std	Z+1, r25	; 0x01
    10e0:	80 83       	st	Z, r24
    10e2:	fe 01       	movw	r30, r28
    10e4:	e7 5b       	subi	r30, 0xB7	; 183
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	71 83       	std	Z+1, r23	; 0x01
    10ea:	60 83       	st	Z, r22

	/* Display User options (Open door / Change Password)*/
	displayUserOptions();
    10ec:	0e 94 25 07 	call	0xe4a	; 0xe4a <displayUserOptions>

	/* Send user option To Control ECU */
	HMI_sendOption(HMI_takeOption());
    10f0:	0e 94 c0 0b 	call	0x1780	; 0x1780 <HMI_takeOption>
    10f4:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <HMI_sendOption>

	/* Take Actions According To User Option */
	switch(HMI_takeOption())
    10f8:	0e 94 c0 0b 	call	0x1780	; 0x1780 <HMI_takeOption>
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	2d 96       	adiw	r28, 0x0d	; 13
    1102:	3f af       	std	Y+63, r19	; 0x3f
    1104:	2e af       	std	Y+62, r18	; 0x3e
    1106:	2d 97       	sbiw	r28, 0x0d	; 13
    1108:	2d 96       	adiw	r28, 0x0d	; 13
    110a:	8e ad       	ldd	r24, Y+62	; 0x3e
    110c:	9f ad       	ldd	r25, Y+63	; 0x3f
    110e:	2d 97       	sbiw	r28, 0x0d	; 13
    1110:	8b 32       	cpi	r24, 0x2B	; 43
    1112:	91 05       	cpc	r25, r1
    1114:	49 f0       	breq	.+18     	; 0x1128 <UserOptions+0x6a>
    1116:	2d 96       	adiw	r28, 0x0d	; 13
    1118:	ee ad       	ldd	r30, Y+62	; 0x3e
    111a:	ff ad       	ldd	r31, Y+63	; 0x3f
    111c:	2d 97       	sbiw	r28, 0x0d	; 13
    111e:	ed 32       	cpi	r30, 0x2D	; 45
    1120:	f1 05       	cpc	r31, r1
    1122:	09 f4       	brne	.+2      	; 0x1126 <UserOptions+0x68>
    1124:	60 c1       	rjmp	.+704    	; 0x13e6 <UserOptions+0x328>
    1126:	0f c3       	rjmp	.+1566   	; 0x1746 <UserOptions+0x688>
		/* This Loop won't terminate until The password is correctly entered */
			while(1)
			{

			/* Ask user to enter the password */
			LCD_clearScreen();
    1128:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_clearScreen>
			LCD_moveCursor(0,4);
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	64 e0       	ldi	r22, 0x04	; 4
    1130:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LCD_moveCursor>
			LCD_displayString((uint8*)"Please Enter Password : ");
    1134:	80 ee       	ldi	r24, 0xE0	; 224
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 75 17 	call	0x2eea	; 0x2eea <LCD_displayString>
    113c:	fe 01       	movw	r30, r28
    113e:	ed 5b       	subi	r30, 0xBD	; 189
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	a8 e4       	ldi	r26, 0x48	; 72
    1148:	b3 e4       	ldi	r27, 0x43	; 67
    114a:	80 83       	st	Z, r24
    114c:	91 83       	std	Z+1, r25	; 0x01
    114e:	a2 83       	std	Z+2, r26	; 0x02
    1150:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1152:	8e 01       	movw	r16, r28
    1154:	01 5c       	subi	r16, 0xC1	; 193
    1156:	1f 4f       	sbci	r17, 0xFF	; 255
    1158:	fe 01       	movw	r30, r28
    115a:	ed 5b       	subi	r30, 0xBD	; 189
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	60 81       	ld	r22, Z
    1160:	71 81       	ldd	r23, Z+1	; 0x01
    1162:	82 81       	ldd	r24, Z+2	; 0x02
    1164:	93 81       	ldd	r25, Z+3	; 0x03
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	4a ef       	ldi	r20, 0xFA	; 250
    116c:	54 e4       	ldi	r21, 0x44	; 68
    116e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	f8 01       	movw	r30, r16
    1178:	80 83       	st	Z, r24
    117a:	91 83       	std	Z+1, r25	; 0x01
    117c:	a2 83       	std	Z+2, r26	; 0x02
    117e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1180:	fe 01       	movw	r30, r28
    1182:	ff 96       	adiw	r30, 0x3f	; 63
    1184:	60 81       	ld	r22, Z
    1186:	71 81       	ldd	r23, Z+1	; 0x01
    1188:	82 81       	ldd	r24, Z+2	; 0x02
    118a:	93 81       	ldd	r25, Z+3	; 0x03
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 e8       	ldi	r20, 0x80	; 128
    1192:	5f e3       	ldi	r21, 0x3F	; 63
    1194:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1198:	88 23       	and	r24, r24
    119a:	2c f4       	brge	.+10     	; 0x11a6 <UserOptions+0xe8>
		__ticks = 1;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	9e af       	std	Y+62, r25	; 0x3e
    11a2:	8d af       	std	Y+61, r24	; 0x3d
    11a4:	46 c0       	rjmp	.+140    	; 0x1232 <UserOptions+0x174>
	else if (__tmp > 65535)
    11a6:	fe 01       	movw	r30, r28
    11a8:	ff 96       	adiw	r30, 0x3f	; 63
    11aa:	60 81       	ld	r22, Z
    11ac:	71 81       	ldd	r23, Z+1	; 0x01
    11ae:	82 81       	ldd	r24, Z+2	; 0x02
    11b0:	93 81       	ldd	r25, Z+3	; 0x03
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	3f ef       	ldi	r19, 0xFF	; 255
    11b6:	4f e7       	ldi	r20, 0x7F	; 127
    11b8:	57 e4       	ldi	r21, 0x47	; 71
    11ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11be:	18 16       	cp	r1, r24
    11c0:	64 f5       	brge	.+88     	; 0x121a <UserOptions+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c2:	fe 01       	movw	r30, r28
    11c4:	ed 5b       	subi	r30, 0xBD	; 189
    11c6:	ff 4f       	sbci	r31, 0xFF	; 255
    11c8:	60 81       	ld	r22, Z
    11ca:	71 81       	ldd	r23, Z+1	; 0x01
    11cc:	82 81       	ldd	r24, Z+2	; 0x02
    11ce:	93 81       	ldd	r25, Z+3	; 0x03
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e2       	ldi	r20, 0x20	; 32
    11d6:	51 e4       	ldi	r21, 0x41	; 65
    11d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	bc 01       	movw	r22, r24
    11e2:	cd 01       	movw	r24, r26
    11e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	9e af       	std	Y+62, r25	; 0x3e
    11ee:	8d af       	std	Y+61, r24	; 0x3d
    11f0:	0f c0       	rjmp	.+30     	; 0x1210 <UserOptions+0x152>
    11f2:	88 ec       	ldi	r24, 0xC8	; 200
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	9c af       	std	Y+60, r25	; 0x3c
    11f8:	8b af       	std	Y+59, r24	; 0x3b
    11fa:	8b ad       	ldd	r24, Y+59	; 0x3b
    11fc:	9c ad       	ldd	r25, Y+60	; 0x3c
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <UserOptions+0x140>
    1202:	9c af       	std	Y+60, r25	; 0x3c
    1204:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1206:	8d ad       	ldd	r24, Y+61	; 0x3d
    1208:	9e ad       	ldd	r25, Y+62	; 0x3e
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	9e af       	std	Y+62, r25	; 0x3e
    120e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1210:	8d ad       	ldd	r24, Y+61	; 0x3d
    1212:	9e ad       	ldd	r25, Y+62	; 0x3e
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	69 f7       	brne	.-38     	; 0x11f2 <UserOptions+0x134>
    1218:	16 c0       	rjmp	.+44     	; 0x1246 <UserOptions+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121a:	fe 01       	movw	r30, r28
    121c:	ff 96       	adiw	r30, 0x3f	; 63
    121e:	60 81       	ld	r22, Z
    1220:	71 81       	ldd	r23, Z+1	; 0x01
    1222:	82 81       	ldd	r24, Z+2	; 0x02
    1224:	93 81       	ldd	r25, Z+3	; 0x03
    1226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	9e af       	std	Y+62, r25	; 0x3e
    1230:	8d af       	std	Y+61, r24	; 0x3d
    1232:	8d ad       	ldd	r24, Y+61	; 0x3d
    1234:	9e ad       	ldd	r25, Y+62	; 0x3e
    1236:	9a af       	std	Y+58, r25	; 0x3a
    1238:	89 af       	std	Y+57, r24	; 0x39
    123a:	89 ad       	ldd	r24, Y+57	; 0x39
    123c:	9a ad       	ldd	r25, Y+58	; 0x3a
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <UserOptions+0x180>
    1242:	9a af       	std	Y+58, r25	; 0x3a
    1244:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(200);
			/* Display '*' on the screen */
			HMI_Adjust_And_Display_Password(a_first_password);
    1246:	fe 01       	movw	r30, r28
    1248:	e9 5b       	subi	r30, 0xB9	; 185
    124a:	ff 4f       	sbci	r31, 0xFF	; 255
    124c:	80 81       	ld	r24, Z
    124e:	91 81       	ldd	r25, Z+1	; 0x01
    1250:	0e 94 a3 05 	call	0xb46	; 0xb46 <HMI_Adjust_And_Display_Password>

			/* Send the password to control ECU to check it matches with the saved password or not*/
			Send_Password_To_ControlECU(a_first_password);
    1254:	fe 01       	movw	r30, r28
    1256:	e9 5b       	subi	r30, 0xB9	; 185
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	80 81       	ld	r24, Z
    125c:	91 81       	ldd	r25, Z+1	; 0x01
    125e:	0e 94 c3 06 	call	0xd86	; 0xd86 <Send_Password_To_ControlECU>

			/* Receive the status of the password (Matches or not) */
			status = recievePasswordStatus();
    1262:	0e 94 af 0b 	call	0x175e	; 0x175e <recievePasswordStatus>
    1266:	80 93 a3 01 	sts	0x01A3, r24

			/* Check on the status comes from Control ECU*/
	/*-->*/		if(status == DOOR_IS_OPENING )
    126a:	80 91 a3 01 	lds	r24, 0x01A3
    126e:	82 32       	cpi	r24, 0x22	; 34
    1270:	31 f5       	brne	.+76     	; 0x12be <UserOptions+0x200>
			{
				LCD_clearScreen();
    1272:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_clearScreen>

				/* Opening The door as The password Matched */
				LCD_clearScreen();
    1276:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_clearScreen>
				LCD_moveCursor(0,4);
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	64 e0       	ldi	r22, 0x04	; 4
    127e:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LCD_moveCursor>
				LCD_displayString((uint8*)"Door is Opening...");
    1282:	89 ef       	ldi	r24, 0xF9	; 249
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 75 17 	call	0x2eea	; 0x2eea <LCD_displayString>

				/* Waiting Control ECU To decide when we close the door */
				status = recievePasswordStatus();
    128a:	0e 94 af 0b 	call	0x175e	; 0x175e <recievePasswordStatus>
    128e:	80 93 a3 01 	sts	0x01A3, r24

				/* If the status sent by control ECU is CLOSING_DOOR */
				if(status == DOOR_IS_CLOSING)
    1292:	80 91 a3 01 	lds	r24, 0x01A3
    1296:	83 33       	cpi	r24, 0x33	; 51
    1298:	09 f0       	breq	.+2      	; 0x129c <UserOptions+0x1de>
    129a:	46 cf       	rjmp	.-372    	; 0x1128 <UserOptions+0x6a>
				{
					LCD_clearScreen();
    129c:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_clearScreen>

					/* The door is closing*/
					LCD_clearScreen();
    12a0:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_clearScreen>
					LCD_moveCursor(0,4);
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	64 e0       	ldi	r22, 0x04	; 4
    12a8:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LCD_moveCursor>
					LCD_displayString((uint8*)"closing The Door");
    12ac:	8c e0       	ldi	r24, 0x0C	; 12
    12ae:	91 e0       	ldi	r25, 0x01	; 1
    12b0:	0e 94 75 17 	call	0x2eea	; 0x2eea <LCD_displayString>

					/* Wait Until The door is closed to return to main menu*/
					status = recievePasswordStatus();
    12b4:	0e 94 af 0b 	call	0x175e	; 0x175e <recievePasswordStatus>
    12b8:	80 93 a3 01 	sts	0x01A3, r24
    12bc:	44 c2       	rjmp	.+1160   	; 0x1746 <UserOptions+0x688>
					break;
				}
			}
	/*-->*/		else if(status == PASSWORD_DISMATCH)
    12be:	80 91 a3 01 	lds	r24, 0x01A3
    12c2:	88 23       	and	r24, r24
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <UserOptions+0x20a>
    12c6:	7d c0       	rjmp	.+250    	; 0x13c2 <UserOptions+0x304>
				{
				LCD_clearScreen();
    12c8:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_clearScreen>
				LCD_moveCursor(0,4);
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	64 e0       	ldi	r22, 0x04	; 4
    12d0:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LCD_moveCursor>
				LCD_displayString((uint8*)"Wrong Password !");
    12d4:	8d e1       	ldi	r24, 0x1D	; 29
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	0e 94 75 17 	call	0x2eea	; 0x2eea <LCD_displayString>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	aa ef       	ldi	r26, 0xFA	; 250
    12e2:	b3 e4       	ldi	r27, 0x43	; 67
    12e4:	8d ab       	std	Y+53, r24	; 0x35
    12e6:	9e ab       	std	Y+54, r25	; 0x36
    12e8:	af ab       	std	Y+55, r26	; 0x37
    12ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ec:	6d a9       	ldd	r22, Y+53	; 0x35
    12ee:	7e a9       	ldd	r23, Y+54	; 0x36
    12f0:	8f a9       	ldd	r24, Y+55	; 0x37
    12f2:	98 ad       	ldd	r25, Y+56	; 0x38
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	4a ef       	ldi	r20, 0xFA	; 250
    12fa:	54 e4       	ldi	r21, 0x44	; 68
    12fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	89 ab       	std	Y+49, r24	; 0x31
    1306:	9a ab       	std	Y+50, r25	; 0x32
    1308:	ab ab       	std	Y+51, r26	; 0x33
    130a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    130c:	69 a9       	ldd	r22, Y+49	; 0x31
    130e:	7a a9       	ldd	r23, Y+50	; 0x32
    1310:	8b a9       	ldd	r24, Y+51	; 0x33
    1312:	9c a9       	ldd	r25, Y+52	; 0x34
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e8       	ldi	r20, 0x80	; 128
    131a:	5f e3       	ldi	r21, 0x3F	; 63
    131c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1320:	88 23       	and	r24, r24
    1322:	2c f4       	brge	.+10     	; 0x132e <UserOptions+0x270>
		__ticks = 1;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	98 ab       	std	Y+48, r25	; 0x30
    132a:	8f a7       	std	Y+47, r24	; 0x2f
    132c:	3f c0       	rjmp	.+126    	; 0x13ac <UserOptions+0x2ee>
	else if (__tmp > 65535)
    132e:	69 a9       	ldd	r22, Y+49	; 0x31
    1330:	7a a9       	ldd	r23, Y+50	; 0x32
    1332:	8b a9       	ldd	r24, Y+51	; 0x33
    1334:	9c a9       	ldd	r25, Y+52	; 0x34
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	3f ef       	ldi	r19, 0xFF	; 255
    133a:	4f e7       	ldi	r20, 0x7F	; 127
    133c:	57 e4       	ldi	r21, 0x47	; 71
    133e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1342:	18 16       	cp	r1, r24
    1344:	4c f5       	brge	.+82     	; 0x1398 <UserOptions+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1346:	6d a9       	ldd	r22, Y+53	; 0x35
    1348:	7e a9       	ldd	r23, Y+54	; 0x36
    134a:	8f a9       	ldd	r24, Y+55	; 0x37
    134c:	98 ad       	ldd	r25, Y+56	; 0x38
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	40 e2       	ldi	r20, 0x20	; 32
    1354:	51 e4       	ldi	r21, 0x41	; 65
    1356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	bc 01       	movw	r22, r24
    1360:	cd 01       	movw	r24, r26
    1362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	98 ab       	std	Y+48, r25	; 0x30
    136c:	8f a7       	std	Y+47, r24	; 0x2f
    136e:	0f c0       	rjmp	.+30     	; 0x138e <UserOptions+0x2d0>
    1370:	88 ec       	ldi	r24, 0xC8	; 200
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	9e a7       	std	Y+46, r25	; 0x2e
    1376:	8d a7       	std	Y+45, r24	; 0x2d
    1378:	8d a5       	ldd	r24, Y+45	; 0x2d
    137a:	9e a5       	ldd	r25, Y+46	; 0x2e
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	f1 f7       	brne	.-4      	; 0x137c <UserOptions+0x2be>
    1380:	9e a7       	std	Y+46, r25	; 0x2e
    1382:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1384:	8f a5       	ldd	r24, Y+47	; 0x2f
    1386:	98 a9       	ldd	r25, Y+48	; 0x30
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	98 ab       	std	Y+48, r25	; 0x30
    138c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1390:	98 a9       	ldd	r25, Y+48	; 0x30
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	69 f7       	brne	.-38     	; 0x1370 <UserOptions+0x2b2>
    1396:	c8 ce       	rjmp	.-624    	; 0x1128 <UserOptions+0x6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1398:	69 a9       	ldd	r22, Y+49	; 0x31
    139a:	7a a9       	ldd	r23, Y+50	; 0x32
    139c:	8b a9       	ldd	r24, Y+51	; 0x33
    139e:	9c a9       	ldd	r25, Y+52	; 0x34
    13a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	98 ab       	std	Y+48, r25	; 0x30
    13aa:	8f a7       	std	Y+47, r24	; 0x2f
    13ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ae:	98 a9       	ldd	r25, Y+48	; 0x30
    13b0:	9c a7       	std	Y+44, r25	; 0x2c
    13b2:	8b a7       	std	Y+43, r24	; 0x2b
    13b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    13b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <UserOptions+0x2fa>
    13bc:	9c a7       	std	Y+44, r25	; 0x2c
    13be:	8b a7       	std	Y+43, r24	; 0x2b
    13c0:	b3 ce       	rjmp	.-666    	; 0x1128 <UserOptions+0x6a>
				_delay_ms(500);
				/* no break as if the password is wrong for 3 times ,Alarm will turn on */
				}

				else if(status == ERROR_MESSAGE)
    13c2:	80 91 a3 01 	lds	r24, 0x01A3
    13c6:	8f 3f       	cpi	r24, 0xFF	; 255
    13c8:	09 f0       	breq	.+2      	; 0x13cc <UserOptions+0x30e>
    13ca:	ae ce       	rjmp	.-676    	; 0x1128 <UserOptions+0x6a>
				{
				LCD_clearScreen();
    13cc:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_clearScreen>
				LCD_moveCursor(0,4);
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	64 e0       	ldi	r22, 0x04	; 4
    13d4:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LCD_moveCursor>
				LCD_displayString((uint8*)"Thief !!!!!!!");
    13d8:	8e e2       	ldi	r24, 0x2E	; 46
    13da:	91 e0       	ldi	r25, 0x01	; 1
    13dc:	0e 94 75 17 	call	0x2eea	; 0x2eea <LCD_displayString>
				recievePasswordStatus();/*to wait until receive continue program status*/
    13e0:	0e 94 af 0b 	call	0x175e	; 0x175e <recievePasswordStatus>
    13e4:	b0 c1       	rjmp	.+864    	; 0x1746 <UserOptions+0x688>
			/* This Loop won't terminate until The password is correctly entered */
			while(1)
			{

				/* Tell the user to enter the old password*/
				LCD_clearScreen();
    13e6:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_clearScreen>
				LCD_moveCursor(0,4);
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	64 e0       	ldi	r22, 0x04	; 4
    13ee:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LCD_moveCursor>
				LCD_displayString((uint8*)"Please Enter password : ");
    13f2:	8c e3       	ldi	r24, 0x3C	; 60
    13f4:	91 e0       	ldi	r25, 0x01	; 1
    13f6:	0e 94 75 17 	call	0x2eea	; 0x2eea <LCD_displayString>
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a8 e4       	ldi	r26, 0x48	; 72
    1400:	b3 e4       	ldi	r27, 0x43	; 67
    1402:	8f a3       	std	Y+39, r24	; 0x27
    1404:	98 a7       	std	Y+40, r25	; 0x28
    1406:	a9 a7       	std	Y+41, r26	; 0x29
    1408:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140a:	6f a1       	ldd	r22, Y+39	; 0x27
    140c:	78 a5       	ldd	r23, Y+40	; 0x28
    140e:	89 a5       	ldd	r24, Y+41	; 0x29
    1410:	9a a5       	ldd	r25, Y+42	; 0x2a
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	4a ef       	ldi	r20, 0xFA	; 250
    1418:	54 e4       	ldi	r21, 0x44	; 68
    141a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	8b a3       	std	Y+35, r24	; 0x23
    1424:	9c a3       	std	Y+36, r25	; 0x24
    1426:	ad a3       	std	Y+37, r26	; 0x25
    1428:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    142a:	6b a1       	ldd	r22, Y+35	; 0x23
    142c:	7c a1       	ldd	r23, Y+36	; 0x24
    142e:	8d a1       	ldd	r24, Y+37	; 0x25
    1430:	9e a1       	ldd	r25, Y+38	; 0x26
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e8       	ldi	r20, 0x80	; 128
    1438:	5f e3       	ldi	r21, 0x3F	; 63
    143a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    143e:	88 23       	and	r24, r24
    1440:	2c f4       	brge	.+10     	; 0x144c <UserOptions+0x38e>
		__ticks = 1;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	9a a3       	std	Y+34, r25	; 0x22
    1448:	89 a3       	std	Y+33, r24	; 0x21
    144a:	3f c0       	rjmp	.+126    	; 0x14ca <UserOptions+0x40c>
	else if (__tmp > 65535)
    144c:	6b a1       	ldd	r22, Y+35	; 0x23
    144e:	7c a1       	ldd	r23, Y+36	; 0x24
    1450:	8d a1       	ldd	r24, Y+37	; 0x25
    1452:	9e a1       	ldd	r25, Y+38	; 0x26
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	3f ef       	ldi	r19, 0xFF	; 255
    1458:	4f e7       	ldi	r20, 0x7F	; 127
    145a:	57 e4       	ldi	r21, 0x47	; 71
    145c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1460:	18 16       	cp	r1, r24
    1462:	4c f5       	brge	.+82     	; 0x14b6 <UserOptions+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1464:	6f a1       	ldd	r22, Y+39	; 0x27
    1466:	78 a5       	ldd	r23, Y+40	; 0x28
    1468:	89 a5       	ldd	r24, Y+41	; 0x29
    146a:	9a a5       	ldd	r25, Y+42	; 0x2a
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e2       	ldi	r20, 0x20	; 32
    1472:	51 e4       	ldi	r21, 0x41	; 65
    1474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	9a a3       	std	Y+34, r25	; 0x22
    148a:	89 a3       	std	Y+33, r24	; 0x21
    148c:	0f c0       	rjmp	.+30     	; 0x14ac <UserOptions+0x3ee>
    148e:	88 ec       	ldi	r24, 0xC8	; 200
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	98 a3       	std	Y+32, r25	; 0x20
    1494:	8f 8f       	std	Y+31, r24	; 0x1f
    1496:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1498:	98 a1       	ldd	r25, Y+32	; 0x20
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <UserOptions+0x3dc>
    149e:	98 a3       	std	Y+32, r25	; 0x20
    14a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a2:	89 a1       	ldd	r24, Y+33	; 0x21
    14a4:	9a a1       	ldd	r25, Y+34	; 0x22
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	9a a3       	std	Y+34, r25	; 0x22
    14aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ac:	89 a1       	ldd	r24, Y+33	; 0x21
    14ae:	9a a1       	ldd	r25, Y+34	; 0x22
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	69 f7       	brne	.-38     	; 0x148e <UserOptions+0x3d0>
    14b4:	14 c0       	rjmp	.+40     	; 0x14de <UserOptions+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b6:	6b a1       	ldd	r22, Y+35	; 0x23
    14b8:	7c a1       	ldd	r23, Y+36	; 0x24
    14ba:	8d a1       	ldd	r24, Y+37	; 0x25
    14bc:	9e a1       	ldd	r25, Y+38	; 0x26
    14be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	9a a3       	std	Y+34, r25	; 0x22
    14c8:	89 a3       	std	Y+33, r24	; 0x21
    14ca:	89 a1       	ldd	r24, Y+33	; 0x21
    14cc:	9a a1       	ldd	r25, Y+34	; 0x22
    14ce:	9e 8f       	std	Y+30, r25	; 0x1e
    14d0:	8d 8f       	std	Y+29, r24	; 0x1d
    14d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <UserOptions+0x418>
    14da:	9e 8f       	std	Y+30, r25	; 0x1e
    14dc:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(200);

				/* Take the password from the user and display '*' */
				HMI_Adjust_And_Display_Password(a_first_password);
    14de:	fe 01       	movw	r30, r28
    14e0:	e9 5b       	subi	r30, 0xB9	; 185
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	80 81       	ld	r24, Z
    14e6:	91 81       	ldd	r25, Z+1	; 0x01
    14e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <HMI_Adjust_And_Display_Password>

				/* send the password to control ECU to check it */
				Send_Password_To_ControlECU(a_first_password);
    14ec:	fe 01       	movw	r30, r28
    14ee:	e9 5b       	subi	r30, 0xB9	; 185
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	80 81       	ld	r24, Z
    14f4:	91 81       	ldd	r25, Z+1	; 0x01
    14f6:	0e 94 c3 06 	call	0xd86	; 0xd86 <Send_Password_To_ControlECU>

				/* Receive the status of the password (Matches or not)*/
				status = recievePasswordStatus();
    14fa:	0e 94 af 0b 	call	0x175e	; 0x175e <recievePasswordStatus>
    14fe:	80 93 a3 01 	sts	0x01A3, r24

				if(status == PASSWORD_MATCH)
    1502:	80 91 a3 01 	lds	r24, 0x01A3
    1506:	81 31       	cpi	r24, 0x11	; 17
    1508:	09 f0       	breq	.+2      	; 0x150c <UserOptions+0x44e>
    150a:	8a c0       	rjmp	.+276    	; 0x1620 <UserOptions+0x562>
				{
					LCD_clearScreen();
    150c:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_clearScreen>
					LCD_moveCursor(0,4);
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	64 e0       	ldi	r22, 0x04	; 4
    1514:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LCD_moveCursor>
					LCD_displayString((uint8*)"Changing The Password....");
    1518:	85 e5       	ldi	r24, 0x55	; 85
    151a:	91 e0       	ldi	r25, 0x01	; 1
    151c:	0e 94 75 17 	call	0x2eea	; 0x2eea <LCD_displayString>
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	aa e7       	ldi	r26, 0x7A	; 122
    1526:	b4 e4       	ldi	r27, 0x44	; 68
    1528:	89 8f       	std	Y+25, r24	; 0x19
    152a:	9a 8f       	std	Y+26, r25	; 0x1a
    152c:	ab 8f       	std	Y+27, r26	; 0x1b
    152e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1530:	69 8d       	ldd	r22, Y+25	; 0x19
    1532:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1534:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1536:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	4a ef       	ldi	r20, 0xFA	; 250
    153e:	54 e4       	ldi	r21, 0x44	; 68
    1540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	8d 8b       	std	Y+21, r24	; 0x15
    154a:	9e 8b       	std	Y+22, r25	; 0x16
    154c:	af 8b       	std	Y+23, r26	; 0x17
    154e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1550:	6d 89       	ldd	r22, Y+21	; 0x15
    1552:	7e 89       	ldd	r23, Y+22	; 0x16
    1554:	8f 89       	ldd	r24, Y+23	; 0x17
    1556:	98 8d       	ldd	r25, Y+24	; 0x18
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e8       	ldi	r20, 0x80	; 128
    155e:	5f e3       	ldi	r21, 0x3F	; 63
    1560:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1564:	88 23       	and	r24, r24
    1566:	2c f4       	brge	.+10     	; 0x1572 <UserOptions+0x4b4>
		__ticks = 1;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9c 8b       	std	Y+20, r25	; 0x14
    156e:	8b 8b       	std	Y+19, r24	; 0x13
    1570:	3f c0       	rjmp	.+126    	; 0x15f0 <UserOptions+0x532>
	else if (__tmp > 65535)
    1572:	6d 89       	ldd	r22, Y+21	; 0x15
    1574:	7e 89       	ldd	r23, Y+22	; 0x16
    1576:	8f 89       	ldd	r24, Y+23	; 0x17
    1578:	98 8d       	ldd	r25, Y+24	; 0x18
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	3f ef       	ldi	r19, 0xFF	; 255
    157e:	4f e7       	ldi	r20, 0x7F	; 127
    1580:	57 e4       	ldi	r21, 0x47	; 71
    1582:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1586:	18 16       	cp	r1, r24
    1588:	4c f5       	brge	.+82     	; 0x15dc <UserOptions+0x51e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158a:	69 8d       	ldd	r22, Y+25	; 0x19
    158c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    158e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1590:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e2       	ldi	r20, 0x20	; 32
    1598:	51 e4       	ldi	r21, 0x41	; 65
    159a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	bc 01       	movw	r22, r24
    15a4:	cd 01       	movw	r24, r26
    15a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	9c 8b       	std	Y+20, r25	; 0x14
    15b0:	8b 8b       	std	Y+19, r24	; 0x13
    15b2:	0f c0       	rjmp	.+30     	; 0x15d2 <UserOptions+0x514>
    15b4:	88 ec       	ldi	r24, 0xC8	; 200
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	9a 8b       	std	Y+18, r25	; 0x12
    15ba:	89 8b       	std	Y+17, r24	; 0x11
    15bc:	89 89       	ldd	r24, Y+17	; 0x11
    15be:	9a 89       	ldd	r25, Y+18	; 0x12
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	f1 f7       	brne	.-4      	; 0x15c0 <UserOptions+0x502>
    15c4:	9a 8b       	std	Y+18, r25	; 0x12
    15c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c8:	8b 89       	ldd	r24, Y+19	; 0x13
    15ca:	9c 89       	ldd	r25, Y+20	; 0x14
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	9c 8b       	std	Y+20, r25	; 0x14
    15d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d2:	8b 89       	ldd	r24, Y+19	; 0x13
    15d4:	9c 89       	ldd	r25, Y+20	; 0x14
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	69 f7       	brne	.-38     	; 0x15b4 <UserOptions+0x4f6>
    15da:	14 c0       	rjmp	.+40     	; 0x1604 <UserOptions+0x546>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15dc:	6d 89       	ldd	r22, Y+21	; 0x15
    15de:	7e 89       	ldd	r23, Y+22	; 0x16
    15e0:	8f 89       	ldd	r24, Y+23	; 0x17
    15e2:	98 8d       	ldd	r25, Y+24	; 0x18
    15e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	9c 8b       	std	Y+20, r25	; 0x14
    15ee:	8b 8b       	std	Y+19, r24	; 0x13
    15f0:	8b 89       	ldd	r24, Y+19	; 0x13
    15f2:	9c 89       	ldd	r25, Y+20	; 0x14
    15f4:	98 8b       	std	Y+16, r25	; 0x10
    15f6:	8f 87       	std	Y+15, r24	; 0x0f
    15f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15fa:	98 89       	ldd	r25, Y+16	; 0x10
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	f1 f7       	brne	.-4      	; 0x15fc <UserOptions+0x53e>
    1600:	98 8b       	std	Y+16, r25	; 0x10
    1602:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					/* Check The Entered Password */
					Display_EnterPassword_AndCheckStatus(a_first_password,a_second_password);
    1604:	fe 01       	movw	r30, r28
    1606:	e9 5b       	subi	r30, 0xB9	; 185
    1608:	ff 4f       	sbci	r31, 0xFF	; 255
    160a:	80 81       	ld	r24, Z
    160c:	91 81       	ldd	r25, Z+1	; 0x01
    160e:	fe 01       	movw	r30, r28
    1610:	e7 5b       	subi	r30, 0xB7	; 183
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	20 81       	ld	r18, Z
    1616:	31 81       	ldd	r19, Z+1	; 0x01
    1618:	b9 01       	movw	r22, r18
    161a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <Display_EnterPassword_AndCheckStatus>
    161e:	93 c0       	rjmp	.+294    	; 0x1746 <UserOptions+0x688>
					break;
				}

				else if(status == PASSWORD_DISMATCH)
    1620:	80 91 a3 01 	lds	r24, 0x01A3
    1624:	88 23       	and	r24, r24
    1626:	09 f0       	breq	.+2      	; 0x162a <UserOptions+0x56c>
    1628:	7d c0       	rjmp	.+250    	; 0x1724 <UserOptions+0x666>
				{
					LCD_clearScreen();
    162a:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_clearScreen>
					LCD_moveCursor(0,4);
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	64 e0       	ldi	r22, 0x04	; 4
    1632:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LCD_moveCursor>
					LCD_displayString((uint8*)"Incorrect Password !");
    1636:	8f e6       	ldi	r24, 0x6F	; 111
    1638:	91 e0       	ldi	r25, 0x01	; 1
    163a:	0e 94 75 17 	call	0x2eea	; 0x2eea <LCD_displayString>
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	aa ef       	ldi	r26, 0xFA	; 250
    1644:	b3 e4       	ldi	r27, 0x43	; 67
    1646:	8b 87       	std	Y+11, r24	; 0x0b
    1648:	9c 87       	std	Y+12, r25	; 0x0c
    164a:	ad 87       	std	Y+13, r26	; 0x0d
    164c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1650:	7c 85       	ldd	r23, Y+12	; 0x0c
    1652:	8d 85       	ldd	r24, Y+13	; 0x0d
    1654:	9e 85       	ldd	r25, Y+14	; 0x0e
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	4a ef       	ldi	r20, 0xFA	; 250
    165c:	54 e4       	ldi	r21, 0x44	; 68
    165e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	8f 83       	std	Y+7, r24	; 0x07
    1668:	98 87       	std	Y+8, r25	; 0x08
    166a:	a9 87       	std	Y+9, r26	; 0x09
    166c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    166e:	6f 81       	ldd	r22, Y+7	; 0x07
    1670:	78 85       	ldd	r23, Y+8	; 0x08
    1672:	89 85       	ldd	r24, Y+9	; 0x09
    1674:	9a 85       	ldd	r25, Y+10	; 0x0a
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e8       	ldi	r20, 0x80	; 128
    167c:	5f e3       	ldi	r21, 0x3F	; 63
    167e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1682:	88 23       	and	r24, r24
    1684:	2c f4       	brge	.+10     	; 0x1690 <UserOptions+0x5d2>
		__ticks = 1;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	9e 83       	std	Y+6, r25	; 0x06
    168c:	8d 83       	std	Y+5, r24	; 0x05
    168e:	3f c0       	rjmp	.+126    	; 0x170e <UserOptions+0x650>
	else if (__tmp > 65535)
    1690:	6f 81       	ldd	r22, Y+7	; 0x07
    1692:	78 85       	ldd	r23, Y+8	; 0x08
    1694:	89 85       	ldd	r24, Y+9	; 0x09
    1696:	9a 85       	ldd	r25, Y+10	; 0x0a
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	3f ef       	ldi	r19, 0xFF	; 255
    169c:	4f e7       	ldi	r20, 0x7F	; 127
    169e:	57 e4       	ldi	r21, 0x47	; 71
    16a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a4:	18 16       	cp	r1, r24
    16a6:	4c f5       	brge	.+82     	; 0x16fa <UserOptions+0x63c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e2       	ldi	r20, 0x20	; 32
    16b6:	51 e4       	ldi	r21, 0x41	; 65
    16b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	bc 01       	movw	r22, r24
    16c2:	cd 01       	movw	r24, r26
    16c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
    16d0:	0f c0       	rjmp	.+30     	; 0x16f0 <UserOptions+0x632>
    16d2:	88 ec       	ldi	r24, 0xC8	; 200
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	9c 83       	std	Y+4, r25	; 0x04
    16d8:	8b 83       	std	Y+3, r24	; 0x03
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	f1 f7       	brne	.-4      	; 0x16de <UserOptions+0x620>
    16e2:	9c 83       	std	Y+4, r25	; 0x04
    16e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	9e 83       	std	Y+6, r25	; 0x06
    16ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f0:	8d 81       	ldd	r24, Y+5	; 0x05
    16f2:	9e 81       	ldd	r25, Y+6	; 0x06
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	69 f7       	brne	.-38     	; 0x16d2 <UserOptions+0x614>
    16f8:	76 ce       	rjmp	.-788    	; 0x13e6 <UserOptions+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fa:	6f 81       	ldd	r22, Y+7	; 0x07
    16fc:	78 85       	ldd	r23, Y+8	; 0x08
    16fe:	89 85       	ldd	r24, Y+9	; 0x09
    1700:	9a 85       	ldd	r25, Y+10	; 0x0a
    1702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	9e 83       	std	Y+6, r25	; 0x06
    170c:	8d 83       	std	Y+5, r24	; 0x05
    170e:	8d 81       	ldd	r24, Y+5	; 0x05
    1710:	9e 81       	ldd	r25, Y+6	; 0x06
    1712:	9a 83       	std	Y+2, r25	; 0x02
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <UserOptions+0x65c>
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	61 ce       	rjmp	.-830    	; 0x13e6 <UserOptions+0x328>
					_delay_ms(500);
					/* No break statement to keep asking about the password */
				}

				else if(status == ERROR_MESSAGE)
    1724:	80 91 a3 01 	lds	r24, 0x01A3
    1728:	8f 3f       	cpi	r24, 0xFF	; 255
    172a:	09 f0       	breq	.+2      	; 0x172e <UserOptions+0x670>
    172c:	5c ce       	rjmp	.-840    	; 0x13e6 <UserOptions+0x328>
				{
					LCD_clearScreen();
    172e:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_clearScreen>
					LCD_moveCursor(0,4);
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	64 e0       	ldi	r22, 0x04	; 4
    1736:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LCD_moveCursor>
					LCD_displayString((uint8*)"ERROR !");
    173a:	84 e8       	ldi	r24, 0x84	; 132
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	0e 94 75 17 	call	0x2eea	; 0x2eea <LCD_displayString>
					recievePasswordStatus();/*to wait until receive continue program status*/
    1742:	0e 94 af 0b 	call	0x175e	; 0x175e <recievePasswordStatus>
					break;
				}
			}
			break;
	}
}
    1746:	c4 5b       	subi	r28, 0xB4	; 180
    1748:	df 4f       	sbci	r29, 0xFF	; 255
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	08 95       	ret

0000175e <recievePasswordStatus>:
/****************************************************************************************/

/*
 * Description : gets the status from control ECU of the passwords  (matching or not)
*/
uint8 recievePasswordStatus(void){
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62

	/* Wait until the control ECU is ready to send the status */
	while(UART_recieveByte()!= CONTROL_ECU_READY);
    1766:	0e 94 00 19 	call	0x3200	; 0x3200 <UART_recieveByte>
    176a:	80 31       	cpi	r24, 0x10	; 16
    176c:	e1 f7       	brne	.-8      	; 0x1766 <recievePasswordStatus+0x8>
	UART_sendByte(HMI_ECU_READY);
    176e:	80 e2       	ldi	r24, 0x20	; 32
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <UART_sendByte>

	/*read the status*/
	return UART_recieveByte();
    1776:	0e 94 00 19 	call	0x3200	; 0x3200 <UART_recieveByte>
}
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <HMI_takeOption>:

/*************************************************************************************/
/*
 * Description : take the user's option (pressed key )
*/
uint8 HMI_takeOption(void){
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
	return KEYPAD_getPressedKey();
    1788:	0e 94 72 12 	call	0x24e4	; 0x24e4 <KEYPAD_getPressedKey>
}
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <HMI_handleTimer>:

/***************************************************************************************/
/*
 * Description : increment the global counter for the timer (Call Back Funcation)
*/
void HMI_handleTimer(void){
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
	timer_flag ++;
    179a:	80 91 9c 01 	lds	r24, 0x019C
    179e:	8f 5f       	subi	r24, 0xFF	; 255
    17a0:	80 93 9c 01 	sts	0x019C, r24
}
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <HMI_sendOption>:
/****************************************************************************************/
/*
 * Description : sends the option which user chose from the main menu to be handled in control ECU side
*/
void HMI_sendOption(uint8 option){
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	0f 92       	push	r0
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	89 83       	std	Y+1, r24	; 0x01

	UART_sendByte(HMI_ECU_READY);
    17b6:	80 e2       	ldi	r24, 0x20	; 32
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <UART_sendByte>
	/* Wait until the control ECU is ready to recieve option */
	while(UART_recieveByte()!= CONTROL_ECU_READY);
    17be:	0e 94 00 19 	call	0x3200	; 0x3200 <UART_recieveByte>
    17c2:	80 31       	cpi	r24, 0x10	; 16
    17c4:	e1 f7       	brne	.-8      	; 0x17be <HMI_sendOption+0x14>
	 UART_sendByte(option);
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	88 2f       	mov	r24, r24
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <UART_sendByte>
}
    17d0:	0f 90       	pop	r0
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <main>:
/***************************************************************************************/

/*******************************************************************************
 *                             main Function                 					 *
 *******************************************************************************/
int main(void){
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	67 97       	sbiw	r28, 0x17	; 23
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61

	/* Contain First Password Taken From User */
	uint8 second_password_buffer[PASSWORD_LENGTH];

	/* callback function of timer1 */
	Timer1_setCallBack(HMI_handleTimer);
    17ec:	89 ec       	ldi	r24, 0xC9	; 201
    17ee:	9b e0       	ldi	r25, 0x0B	; 11
    17f0:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <Timer1_setCallBack>

	/* UART configuration*/
	UART_ConfigType s_uart_config = {Eight_bits,Disabled,one_bit,Double_Speed_mode,HMI_BAUD_RATE};
    17f4:	ce 01       	movw	r24, r28
    17f6:	0b 96       	adiw	r24, 0x0b	; 11
    17f8:	9c 8b       	std	Y+20, r25	; 0x14
    17fa:	8b 8b       	std	Y+19, r24	; 0x13
    17fc:	e4 e9       	ldi	r30, 0x94	; 148
    17fe:	f1 e0       	ldi	r31, 0x01	; 1
    1800:	fe 8b       	std	Y+22, r31	; 0x16
    1802:	ed 8b       	std	Y+21, r30	; 0x15
    1804:	f8 e0       	ldi	r31, 0x08	; 8
    1806:	ff 8b       	std	Y+23, r31	; 0x17
    1808:	ed 89       	ldd	r30, Y+21	; 0x15
    180a:	fe 89       	ldd	r31, Y+22	; 0x16
    180c:	00 80       	ld	r0, Z
    180e:	8d 89       	ldd	r24, Y+21	; 0x15
    1810:	9e 89       	ldd	r25, Y+22	; 0x16
    1812:	01 96       	adiw	r24, 0x01	; 1
    1814:	9e 8b       	std	Y+22, r25	; 0x16
    1816:	8d 8b       	std	Y+21, r24	; 0x15
    1818:	eb 89       	ldd	r30, Y+19	; 0x13
    181a:	fc 89       	ldd	r31, Y+20	; 0x14
    181c:	00 82       	st	Z, r0
    181e:	8b 89       	ldd	r24, Y+19	; 0x13
    1820:	9c 89       	ldd	r25, Y+20	; 0x14
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	9c 8b       	std	Y+20, r25	; 0x14
    1826:	8b 8b       	std	Y+19, r24	; 0x13
    1828:	9f 89       	ldd	r25, Y+23	; 0x17
    182a:	91 50       	subi	r25, 0x01	; 1
    182c:	9f 8b       	std	Y+23, r25	; 0x17
    182e:	ef 89       	ldd	r30, Y+23	; 0x17
    1830:	ee 23       	and	r30, r30
    1832:	51 f7       	brne	.-44     	; 0x1808 <main+0x30>
	UART_init(&s_uart_config);
    1834:	ce 01       	movw	r24, r28
    1836:	0b 96       	adiw	r24, 0x0b	; 11
    1838:	0e 94 26 18 	call	0x304c	; 0x304c <UART_init>

	/* LCD Intialization */
	LCD_init();
    183c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_init>

	/* Enable (I-bit) */
	SREG |= (1<<7);
    1840:	af e5       	ldi	r26, 0x5F	; 95
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	ef e5       	ldi	r30, 0x5F	; 95
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	80 68       	ori	r24, 0x80	; 128
    184c:	8c 93       	st	X, r24

	/* Ask User to Enter The password for first time the we check if 2 passwords are matched or not*/
	Display_EnterPassword_AndCheckStatus(first_password_buffer,second_password_buffer);
    184e:	9e 01       	movw	r18, r28
    1850:	2a 5f       	subi	r18, 0xFA	; 250
    1852:	3f 4f       	sbci	r19, 0xFF	; 255
    1854:	ce 01       	movw	r24, r28
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	b9 01       	movw	r22, r18
    185a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <Display_EnterPassword_AndCheckStatus>

	/*this while loop used to keep asking the user to choose from the main menu*/
	while(1){

		UserOptions(first_password_buffer,second_password_buffer);
    185e:	9e 01       	movw	r18, r28
    1860:	2a 5f       	subi	r18, 0xFA	; 250
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	ce 01       	movw	r24, r28
    1866:	01 96       	adiw	r24, 0x01	; 1
    1868:	b9 01       	movw	r22, r18
    186a:	0e 94 5f 08 	call	0x10be	; 0x10be <UserOptions>
    186e:	f7 cf       	rjmp	.-18     	; 0x185e <main+0x86>

00001870 <__vector_9>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

/******************************* ISR For Timer0 Normal (Overflow) Mode *********************************/
ISR(TIMER0_OVF_vect)
{
    1870:	1f 92       	push	r1
    1872:	0f 92       	push	r0
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	0f 92       	push	r0
    1878:	11 24       	eor	r1, r1
    187a:	2f 93       	push	r18
    187c:	3f 93       	push	r19
    187e:	4f 93       	push	r20
    1880:	5f 93       	push	r21
    1882:	6f 93       	push	r22
    1884:	7f 93       	push	r23
    1886:	8f 93       	push	r24
    1888:	9f 93       	push	r25
    188a:	af 93       	push	r26
    188c:	bf 93       	push	r27
    188e:	ef 93       	push	r30
    1890:	ff 93       	push	r31
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    189a:	80 91 9d 01 	lds	r24, 0x019D
    189e:	90 91 9e 01 	lds	r25, 0x019E
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	29 f0       	breq	.+10     	; 0x18b0 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after Timer0 Overflow Occurs*/
		(*g_callBackPtr0)(); /* call the function of Timer0 ISR using pointer to function g_callBackPtr0(); */
    18a6:	e0 91 9d 01 	lds	r30, 0x019D
    18aa:	f0 91 9e 01 	lds	r31, 0x019E
    18ae:	09 95       	icall
	}
}
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	ff 91       	pop	r31
    18b6:	ef 91       	pop	r30
    18b8:	bf 91       	pop	r27
    18ba:	af 91       	pop	r26
    18bc:	9f 91       	pop	r25
    18be:	8f 91       	pop	r24
    18c0:	7f 91       	pop	r23
    18c2:	6f 91       	pop	r22
    18c4:	5f 91       	pop	r21
    18c6:	4f 91       	pop	r20
    18c8:	3f 91       	pop	r19
    18ca:	2f 91       	pop	r18
    18cc:	0f 90       	pop	r0
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	0f 90       	pop	r0
    18d2:	1f 90       	pop	r1
    18d4:	18 95       	reti

000018d6 <__vector_19>:

/******************************* ISR For Timer0 Compare Match Mode **************************************/
ISR(TIMER0_COMP_vect)
{
    18d6:	1f 92       	push	r1
    18d8:	0f 92       	push	r0
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	0f 92       	push	r0
    18de:	11 24       	eor	r1, r1
    18e0:	2f 93       	push	r18
    18e2:	3f 93       	push	r19
    18e4:	4f 93       	push	r20
    18e6:	5f 93       	push	r21
    18e8:	6f 93       	push	r22
    18ea:	7f 93       	push	r23
    18ec:	8f 93       	push	r24
    18ee:	9f 93       	push	r25
    18f0:	af 93       	push	r26
    18f2:	bf 93       	push	r27
    18f4:	ef 93       	push	r30
    18f6:	ff 93       	push	r31
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    1900:	80 91 9d 01 	lds	r24, 0x019D
    1904:	90 91 9e 01 	lds	r25, 0x019E
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	29 f0       	breq	.+10     	; 0x1916 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after Timer0 Compare Match Occurs*/
		(*g_callBackPtr0)(); /* call the function of Timer0 ISR using pointer to function g_callBackPtr0(); */
    190c:	e0 91 9d 01 	lds	r30, 0x019D
    1910:	f0 91 9e 01 	lds	r31, 0x019E
    1914:	09 95       	icall
	}
}
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	ff 91       	pop	r31
    191c:	ef 91       	pop	r30
    191e:	bf 91       	pop	r27
    1920:	af 91       	pop	r26
    1922:	9f 91       	pop	r25
    1924:	8f 91       	pop	r24
    1926:	7f 91       	pop	r23
    1928:	6f 91       	pop	r22
    192a:	5f 91       	pop	r21
    192c:	4f 91       	pop	r20
    192e:	3f 91       	pop	r19
    1930:	2f 91       	pop	r18
    1932:	0f 90       	pop	r0
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	0f 90       	pop	r0
    1938:	1f 90       	pop	r1
    193a:	18 95       	reti

0000193c <__vector_8>:

/******************************* ISR For Timer1 Normal (Overflow) Mode ***********************************/
ISR(TIMER1_OVF_vect)
{
    193c:	1f 92       	push	r1
    193e:	0f 92       	push	r0
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	0f 92       	push	r0
    1944:	11 24       	eor	r1, r1
    1946:	2f 93       	push	r18
    1948:	3f 93       	push	r19
    194a:	4f 93       	push	r20
    194c:	5f 93       	push	r21
    194e:	6f 93       	push	r22
    1950:	7f 93       	push	r23
    1952:	8f 93       	push	r24
    1954:	9f 93       	push	r25
    1956:	af 93       	push	r26
    1958:	bf 93       	push	r27
    195a:	ef 93       	push	r30
    195c:	ff 93       	push	r31
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    1966:	80 91 9f 01 	lds	r24, 0x019F
    196a:	90 91 a0 01 	lds	r25, 0x01A0
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	29 f0       	breq	.+10     	; 0x197c <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after Timer1 Overflow Occurs*/
		(*g_callBackPtr1)(); /* call the function of Timer1 ISR using pointer to function g_callBackPtr1(); */
    1972:	e0 91 9f 01 	lds	r30, 0x019F
    1976:	f0 91 a0 01 	lds	r31, 0x01A0
    197a:	09 95       	icall
	}
}
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	ff 91       	pop	r31
    1982:	ef 91       	pop	r30
    1984:	bf 91       	pop	r27
    1986:	af 91       	pop	r26
    1988:	9f 91       	pop	r25
    198a:	8f 91       	pop	r24
    198c:	7f 91       	pop	r23
    198e:	6f 91       	pop	r22
    1990:	5f 91       	pop	r21
    1992:	4f 91       	pop	r20
    1994:	3f 91       	pop	r19
    1996:	2f 91       	pop	r18
    1998:	0f 90       	pop	r0
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	0f 90       	pop	r0
    199e:	1f 90       	pop	r1
    19a0:	18 95       	reti

000019a2 <__vector_6>:

/******************************* ISR For Timer1 Compare Match Mode (Channel A) ***********************************/
ISR(TIMER1_COMPA_vect)
{
    19a2:	1f 92       	push	r1
    19a4:	0f 92       	push	r0
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	0f 92       	push	r0
    19aa:	11 24       	eor	r1, r1
    19ac:	2f 93       	push	r18
    19ae:	3f 93       	push	r19
    19b0:	4f 93       	push	r20
    19b2:	5f 93       	push	r21
    19b4:	6f 93       	push	r22
    19b6:	7f 93       	push	r23
    19b8:	8f 93       	push	r24
    19ba:	9f 93       	push	r25
    19bc:	af 93       	push	r26
    19be:	bf 93       	push	r27
    19c0:	ef 93       	push	r30
    19c2:	ff 93       	push	r31
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    19cc:	80 91 9f 01 	lds	r24, 0x019F
    19d0:	90 91 a0 01 	lds	r25, 0x01A0
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	29 f0       	breq	.+10     	; 0x19e2 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after Timer1 Compare Match Occurs*/
		(*g_callBackPtr1)(); /* call the function of Timer1 ISR using pointer to function g_callBackPtr1(); */
    19d8:	e0 91 9f 01 	lds	r30, 0x019F
    19dc:	f0 91 a0 01 	lds	r31, 0x01A0
    19e0:	09 95       	icall
	}
}
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	ff 91       	pop	r31
    19e8:	ef 91       	pop	r30
    19ea:	bf 91       	pop	r27
    19ec:	af 91       	pop	r26
    19ee:	9f 91       	pop	r25
    19f0:	8f 91       	pop	r24
    19f2:	7f 91       	pop	r23
    19f4:	6f 91       	pop	r22
    19f6:	5f 91       	pop	r21
    19f8:	4f 91       	pop	r20
    19fa:	3f 91       	pop	r19
    19fc:	2f 91       	pop	r18
    19fe:	0f 90       	pop	r0
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	0f 90       	pop	r0
    1a04:	1f 90       	pop	r1
    1a06:	18 95       	reti

00001a08 <__vector_4>:

/******************************* ISR For Timer2 Normal (Overflow) Mode ***********************************/
ISR(TIMER2_OVF_vect)
{
    1a08:	1f 92       	push	r1
    1a0a:	0f 92       	push	r0
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	0f 92       	push	r0
    1a10:	11 24       	eor	r1, r1
    1a12:	2f 93       	push	r18
    1a14:	3f 93       	push	r19
    1a16:	4f 93       	push	r20
    1a18:	5f 93       	push	r21
    1a1a:	6f 93       	push	r22
    1a1c:	7f 93       	push	r23
    1a1e:	8f 93       	push	r24
    1a20:	9f 93       	push	r25
    1a22:	af 93       	push	r26
    1a24:	bf 93       	push	r27
    1a26:	ef 93       	push	r30
    1a28:	ff 93       	push	r31
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    1a32:	80 91 a1 01 	lds	r24, 0x01A1
    1a36:	90 91 a2 01 	lds	r25, 0x01A2
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	29 f0       	breq	.+10     	; 0x1a48 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after Timer2 Overflow Occurs*/
		(*g_callBackPtr2)(); /* call the function of Timer2 ISR using pointer to function g_callBackPtr2(); */
    1a3e:	e0 91 a1 01 	lds	r30, 0x01A1
    1a42:	f0 91 a2 01 	lds	r31, 0x01A2
    1a46:	09 95       	icall
	}
}
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	ff 91       	pop	r31
    1a4e:	ef 91       	pop	r30
    1a50:	bf 91       	pop	r27
    1a52:	af 91       	pop	r26
    1a54:	9f 91       	pop	r25
    1a56:	8f 91       	pop	r24
    1a58:	7f 91       	pop	r23
    1a5a:	6f 91       	pop	r22
    1a5c:	5f 91       	pop	r21
    1a5e:	4f 91       	pop	r20
    1a60:	3f 91       	pop	r19
    1a62:	2f 91       	pop	r18
    1a64:	0f 90       	pop	r0
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	0f 90       	pop	r0
    1a6a:	1f 90       	pop	r1
    1a6c:	18 95       	reti

00001a6e <__vector_3>:

/******************************* ISR For Timer1 Compare Match Mode ***********************************/
ISR(TIMER2_COMP_vect)
{
    1a6e:	1f 92       	push	r1
    1a70:	0f 92       	push	r0
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	0f 92       	push	r0
    1a76:	11 24       	eor	r1, r1
    1a78:	2f 93       	push	r18
    1a7a:	3f 93       	push	r19
    1a7c:	4f 93       	push	r20
    1a7e:	5f 93       	push	r21
    1a80:	6f 93       	push	r22
    1a82:	7f 93       	push	r23
    1a84:	8f 93       	push	r24
    1a86:	9f 93       	push	r25
    1a88:	af 93       	push	r26
    1a8a:	bf 93       	push	r27
    1a8c:	ef 93       	push	r30
    1a8e:	ff 93       	push	r31
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    1a98:	80 91 a1 01 	lds	r24, 0x01A1
    1a9c:	90 91 a2 01 	lds	r25, 0x01A2
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	29 f0       	breq	.+10     	; 0x1aae <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after Timer2 Compare Match Occurs*/
		(*g_callBackPtr2)(); /* call the function of Timer2 ISR using pointer to function g_callBackPtr2(); */
    1aa4:	e0 91 a1 01 	lds	r30, 0x01A1
    1aa8:	f0 91 a2 01 	lds	r31, 0x01A2
    1aac:	09 95       	icall
	}
}
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	ff 91       	pop	r31
    1ab4:	ef 91       	pop	r30
    1ab6:	bf 91       	pop	r27
    1ab8:	af 91       	pop	r26
    1aba:	9f 91       	pop	r25
    1abc:	8f 91       	pop	r24
    1abe:	7f 91       	pop	r23
    1ac0:	6f 91       	pop	r22
    1ac2:	5f 91       	pop	r21
    1ac4:	4f 91       	pop	r20
    1ac6:	3f 91       	pop	r19
    1ac8:	2f 91       	pop	r18
    1aca:	0f 90       	pop	r0
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	0f 90       	pop	r0
    1ad0:	1f 90       	pop	r1
    1ad2:	18 95       	reti

00001ad4 <Timer_init>:
 3- The Timer Prescalar
 4- The Timer Initial Value That will start counting from it
 5- The The Timer Compare Value (In Compare Mode Only)
*/
void Timer_init(const Timer_ConfigType* Timer_Config)
{
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <Timer_init+0x6>
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	9a 83       	std	Y+2, r25	; 0x02
    1ae0:	89 83       	std	Y+1, r24	; 0x01
	/*************************** Timer0 Initialization *********************************/
	if(Timer_Config->Timer_ID == Timer0)
    1ae2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae6:	80 81       	ld	r24, Z
    1ae8:	88 23       	and	r24, r24
    1aea:	09 f0       	breq	.+2      	; 0x1aee <Timer_init+0x1a>
    1aec:	4e c0       	rjmp	.+156    	; 0x1b8a <Timer_init+0xb6>
	{

		if(Timer_Config->Timer_mode == NormalMode)
    1aee:	e9 81       	ldd	r30, Y+1	; 0x01
    1af0:	fa 81       	ldd	r31, Y+2	; 0x02
    1af2:	81 81       	ldd	r24, Z+1	; 0x01
    1af4:	88 23       	and	r24, r24
    1af6:	f1 f4       	brne	.+60     	; 0x1b34 <Timer_init+0x60>
			* 1. Non PWM mode FOC0=1
			* 2. Normal Mode WGM01=0 & WGM00=0
			* 3. Normal Port Mode (OC0 Disconnected) COM00=0 & COM01=0
			* 4. Timer0 Prescalar is configured using CS2:0 in TCCR0 Register
			*/
			TCCR0 = (1<<FOC0) | ((Timer_Config->Prescalar) & 0x07);
    1af8:	a3 e5       	ldi	r26, 0x53	; 83
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e9 81       	ldd	r30, Y+1	; 0x01
    1afe:	fa 81       	ldd	r31, Y+2	; 0x02
    1b00:	82 81       	ldd	r24, Z+2	; 0x02
    1b02:	87 70       	andi	r24, 0x07	; 7
    1b04:	80 68       	ori	r24, 0x80	; 128
    1b06:	8c 93       	st	X, r24

			// Set Timer0 initial value
			TCNT0 = Timer_Config->Timer_Initial_value;
    1b08:	a2 e5       	ldi	r26, 0x52	; 82
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b10:	84 81       	ldd	r24, Z+4	; 0x04
    1b12:	95 81       	ldd	r25, Z+5	; 0x05
    1b14:	8c 93       	st	X, r24

			// Timer0 Overflow Interrupt Enable
			TIMSK |= (1 << TOIE0);
    1b16:	a9 e5       	ldi	r26, 0x59	; 89
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e9 e5       	ldi	r30, 0x59	; 89
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	81 60       	ori	r24, 0x01	; 1
    1b22:	8c 93       	st	X, r24

			// Global Interrupt Enable (I-bit)
			SREG  |= (1<<7);
    1b24:	af e5       	ldi	r26, 0x5F	; 95
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	ef e5       	ldi	r30, 0x5F	; 95
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	80 68       	ori	r24, 0x80	; 128
    1b30:	8c 93       	st	X, r24
    1b32:	dc c0       	rjmp	.+440    	; 0x1cec <Timer_init+0x218>
		}

		else if(Timer_Config->Timer_mode == Compare_mode)
    1b34:	e9 81       	ldd	r30, Y+1	; 0x01
    1b36:	fa 81       	ldd	r31, Y+2	; 0x02
    1b38:	81 81       	ldd	r24, Z+1	; 0x01
    1b3a:	81 30       	cpi	r24, 0x01	; 1
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <Timer_init+0x6c>
    1b3e:	d6 c0       	rjmp	.+428    	; 0x1cec <Timer_init+0x218>
			 * 1. Non PWM mode FOC0=1
			 * 2. Compare Match Mode WGM01=1 & WGM00=0
			 * 3. Disconnect OC0 COM00=0 & COM01=0
			 * 4. Timer0 Prescalar is configured using CS2:0 in TCCR0 Register
			*/
			TCCR0 = (1<<FOC0) | (1<<WGM01) |((Timer_Config->Prescalar) & 0x07);
    1b40:	a3 e5       	ldi	r26, 0x53	; 83
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e9 81       	ldd	r30, Y+1	; 0x01
    1b46:	fa 81       	ldd	r31, Y+2	; 0x02
    1b48:	82 81       	ldd	r24, Z+2	; 0x02
    1b4a:	87 70       	andi	r24, 0x07	; 7
    1b4c:	88 68       	ori	r24, 0x88	; 136
    1b4e:	8c 93       	st	X, r24

			// Set Timer0 initial value
			TCNT0 = Timer_Config->Timer_Initial_value;
    1b50:	a2 e5       	ldi	r26, 0x52	; 82
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e9 81       	ldd	r30, Y+1	; 0x01
    1b56:	fa 81       	ldd	r31, Y+2	; 0x02
    1b58:	84 81       	ldd	r24, Z+4	; 0x04
    1b5a:	95 81       	ldd	r25, Z+5	; 0x05
    1b5c:	8c 93       	st	X, r24

			// Set Timer0 Compare Match Value
			OCR0 = Timer_Config->Timer_Compare_value;
    1b5e:	ac e5       	ldi	r26, 0x5C	; 92
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e9 81       	ldd	r30, Y+1	; 0x01
    1b64:	fa 81       	ldd	r31, Y+2	; 0x02
    1b66:	86 81       	ldd	r24, Z+6	; 0x06
    1b68:	97 81       	ldd	r25, Z+7	; 0x07
    1b6a:	8c 93       	st	X, r24

			// Timer0 Compare Match Interrupt Enable
			TIMSK |= (1 << OCIE0);
    1b6c:	a9 e5       	ldi	r26, 0x59	; 89
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e9 e5       	ldi	r30, 0x59	; 89
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	82 60       	ori	r24, 0x02	; 2
    1b78:	8c 93       	st	X, r24

			// Global Interrupt Enable (I-bit)
			SREG  |= (1<<7);
    1b7a:	af e5       	ldi	r26, 0x5F	; 95
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	ef e5       	ldi	r30, 0x5F	; 95
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	80 68       	ori	r24, 0x80	; 128
    1b86:	8c 93       	st	X, r24
    1b88:	b1 c0       	rjmp	.+354    	; 0x1cec <Timer_init+0x218>
		}
	}

	/*************************** Timer1 Initialization *********************************/
	else if(Timer_Config ->Timer_ID == Timer1)
    1b8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8e:	80 81       	ld	r24, Z
    1b90:	81 30       	cpi	r24, 0x01	; 1
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <Timer_init+0xc2>
    1b94:	59 c0       	rjmp	.+178    	; 0x1c48 <Timer_init+0x174>
	{

		if(Timer_Config->Timer_mode == NormalMode)
    1b96:	e9 81       	ldd	r30, Y+1	; 0x01
    1b98:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9a:	81 81       	ldd	r24, Z+1	; 0x01
    1b9c:	88 23       	and	r24, r24
    1b9e:	11 f5       	brne	.+68     	; 0x1be4 <Timer_init+0x110>
			 * 1. Non PWM mode FOC1A = 1 & FOC1B = 1
			 * 2. Normal Mode WGM10=0 & WGM11=0 & WGM12 =0 & WGM13 =0
			 * 3. Normal Port Mode (Disconnect OC0) COM1A0/COM1B0 = 0 & COM1A1/COM1B0 = 0
			 * 4. Timer1 Prescalar is configured using CS12:0 in TCCR1B Register
			*/
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1ba0:	ef e4       	ldi	r30, 0x4F	; 79
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	8c e0       	ldi	r24, 0x0C	; 12
    1ba6:	80 83       	st	Z, r24
			TCCR1B = (Timer_Config->Prescalar);
    1ba8:	ae e4       	ldi	r26, 0x4E	; 78
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e9 81       	ldd	r30, Y+1	; 0x01
    1bae:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb0:	82 81       	ldd	r24, Z+2	; 0x02
    1bb2:	8c 93       	st	X, r24

			// Set Timer1 initial value
			TCNT1 = Timer_Config->Timer_Initial_value;
    1bb4:	ac e4       	ldi	r26, 0x4C	; 76
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bba:	fa 81       	ldd	r31, Y+2	; 0x02
    1bbc:	84 81       	ldd	r24, Z+4	; 0x04
    1bbe:	95 81       	ldd	r25, Z+5	; 0x05
    1bc0:	11 96       	adiw	r26, 0x01	; 1
    1bc2:	9c 93       	st	X, r25
    1bc4:	8e 93       	st	-X, r24

			// Timer1 Overflow Interrupt Enable
			TIMSK |= (1<<TOIE1);
    1bc6:	a9 e5       	ldi	r26, 0x59	; 89
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e9 e5       	ldi	r30, 0x59	; 89
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	84 60       	ori	r24, 0x04	; 4
    1bd2:	8c 93       	st	X, r24

			// Global Interrupt Enable (I-bit)
			SREG  |= (1<<7);
    1bd4:	af e5       	ldi	r26, 0x5F	; 95
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	ef e5       	ldi	r30, 0x5F	; 95
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	80 68       	ori	r24, 0x80	; 128
    1be0:	8c 93       	st	X, r24
    1be2:	84 c0       	rjmp	.+264    	; 0x1cec <Timer_init+0x218>

		}

		else if(Timer_Config->Timer_mode == Compare_mode)
    1be4:	e9 81       	ldd	r30, Y+1	; 0x01
    1be6:	fa 81       	ldd	r31, Y+2	; 0x02
    1be8:	81 81       	ldd	r24, Z+1	; 0x01
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	09 f0       	breq	.+2      	; 0x1bf0 <Timer_init+0x11c>
    1bee:	7e c0       	rjmp	.+252    	; 0x1cec <Timer_init+0x218>
			 * 1. Non PWM mode FOC1A =1 & FOC1B = 1
			 * 2. Compare Match Mode WGM10 =0 & WGM11 =0 & WGM12 =1 & WGM13 =0
			 * 3. Normal Port Mode (Disconnect OC0) COM1A0/COM1B0 = 0 & COM1A1/COM1B0 = 0
			 * 4. Timer1 Prescalar is configured using CS12:0 in TCCR1B Register
			*/
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1bf0:	ef e4       	ldi	r30, 0x4F	; 79
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	8c e0       	ldi	r24, 0x0C	; 12
    1bf6:	80 83       	st	Z, r24
			TCCR1B = (1<<WGM12) | (Timer_Config->Prescalar) ;
    1bf8:	ae e4       	ldi	r26, 0x4E	; 78
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bfe:	fa 81       	ldd	r31, Y+2	; 0x02
    1c00:	82 81       	ldd	r24, Z+2	; 0x02
    1c02:	88 60       	ori	r24, 0x08	; 8
    1c04:	8c 93       	st	X, r24

			// Set Timer1 initial value
			TCNT1 = Timer_Config->Timer_Initial_value;
    1c06:	ac e4       	ldi	r26, 0x4C	; 76
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0e:	84 81       	ldd	r24, Z+4	; 0x04
    1c10:	95 81       	ldd	r25, Z+5	; 0x05
    1c12:	11 96       	adiw	r26, 0x01	; 1
    1c14:	9c 93       	st	X, r25
    1c16:	8e 93       	st	-X, r24

			// Set Timer1 Compare Match Value
			OCR1A = Timer_Config->Timer_Compare_value;
    1c18:	aa e4       	ldi	r26, 0x4A	; 74
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c20:	86 81       	ldd	r24, Z+6	; 0x06
    1c22:	97 81       	ldd	r25, Z+7	; 0x07
    1c24:	11 96       	adiw	r26, 0x01	; 1
    1c26:	9c 93       	st	X, r25
    1c28:	8e 93       	st	-X, r24

			// Timer1 Compare Match Interrupt Enable (Channel A)
			TIMSK |= (1 << OCIE1A);
    1c2a:	a9 e5       	ldi	r26, 0x59	; 89
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e9 e5       	ldi	r30, 0x59	; 89
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	80 61       	ori	r24, 0x10	; 16
    1c36:	8c 93       	st	X, r24

			// Global Interrupt Enable (I-bit)
			SREG  |= (1<<7);
    1c38:	af e5       	ldi	r26, 0x5F	; 95
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	ef e5       	ldi	r30, 0x5F	; 95
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	80 68       	ori	r24, 0x80	; 128
    1c44:	8c 93       	st	X, r24
    1c46:	52 c0       	rjmp	.+164    	; 0x1cec <Timer_init+0x218>

		}
	}

	/*************************** Timer2 Initialization *********************************/
	else if(Timer_Config ->Timer_ID == Timer2)
    1c48:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4c:	80 81       	ld	r24, Z
    1c4e:	82 30       	cpi	r24, 0x02	; 2
    1c50:	09 f0       	breq	.+2      	; 0x1c54 <Timer_init+0x180>
    1c52:	4c c0       	rjmp	.+152    	; 0x1cec <Timer_init+0x218>
	{

		if(Timer_Config->Timer_mode == NormalMode)
    1c54:	e9 81       	ldd	r30, Y+1	; 0x01
    1c56:	fa 81       	ldd	r31, Y+2	; 0x02
    1c58:	81 81       	ldd	r24, Z+1	; 0x01
    1c5a:	88 23       	and	r24, r24
    1c5c:	f1 f4       	brne	.+60     	; 0x1c9a <Timer_init+0x1c6>
			 * 1. Non PWM mode FOC2=1
	    	 * 2. Normal Mode WGM20=0 & WGM21=0
			 * 3. Normal Port Mode (OC0 Disconnected) COM20=0 & COM21=0
			 * 4. Timer2 Prescalar is configured using CS21:0 in TCCR2 Register
			*/
			  TCCR2 = (1<<FOC2) | ((Timer_Config->timer2_prescalar) & 0x07);
    1c5e:	a5 e4       	ldi	r26, 0x45	; 69
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e9 81       	ldd	r30, Y+1	; 0x01
    1c64:	fa 81       	ldd	r31, Y+2	; 0x02
    1c66:	83 81       	ldd	r24, Z+3	; 0x03
    1c68:	87 70       	andi	r24, 0x07	; 7
    1c6a:	80 68       	ori	r24, 0x80	; 128
    1c6c:	8c 93       	st	X, r24

			 // Set Timer2 initial value
			 TCNT2 = Timer_Config->Timer_Initial_value;
    1c6e:	a4 e4       	ldi	r26, 0x44	; 68
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e9 81       	ldd	r30, Y+1	; 0x01
    1c74:	fa 81       	ldd	r31, Y+2	; 0x02
    1c76:	84 81       	ldd	r24, Z+4	; 0x04
    1c78:	95 81       	ldd	r25, Z+5	; 0x05
    1c7a:	8c 93       	st	X, r24

			 // Timer2 Overflow Interrupt Enable
			 TIMSK |= (1 << TOIE2);
    1c7c:	a9 e5       	ldi	r26, 0x59	; 89
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e9 e5       	ldi	r30, 0x59	; 89
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	80 64       	ori	r24, 0x40	; 64
    1c88:	8c 93       	st	X, r24

			 // Global Interrupt Enable (I-bit)
			 SREG  |= (1<<7);
    1c8a:	af e5       	ldi	r26, 0x5F	; 95
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	ef e5       	ldi	r30, 0x5F	; 95
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	80 68       	ori	r24, 0x80	; 128
    1c96:	8c 93       	st	X, r24
    1c98:	29 c0       	rjmp	.+82     	; 0x1cec <Timer_init+0x218>

		}

		else if(Timer_Config->Timer_mode == Compare_mode)
    1c9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ca0:	81 30       	cpi	r24, 0x01	; 1
    1ca2:	21 f5       	brne	.+72     	; 0x1cec <Timer_init+0x218>
			 * 1. Non PWM mode FOC2=1
			 * 2. Compare Match Mode WGM20=0 & WGM21=1
			 * 3. Disconnect OC0 COM20=0 & COM21=0
			 * 4. Timer2 Prescalar is configured using CS22:0 in TCCR2 Register
			 */
			   TCCR2 = (1<<FOC2) | (1<<WGM21) |((Timer_Config->timer2_prescalar) & 0x07);
    1ca4:	a5 e4       	ldi	r26, 0x45	; 69
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    1caa:	fa 81       	ldd	r31, Y+2	; 0x02
    1cac:	83 81       	ldd	r24, Z+3	; 0x03
    1cae:	87 70       	andi	r24, 0x07	; 7
    1cb0:	88 68       	ori	r24, 0x88	; 136
    1cb2:	8c 93       	st	X, r24

			 // Set Timer2 initial value
			 TCNT2 = Timer_Config->Timer_Initial_value;
    1cb4:	a4 e4       	ldi	r26, 0x44	; 68
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cba:	fa 81       	ldd	r31, Y+2	; 0x02
    1cbc:	84 81       	ldd	r24, Z+4	; 0x04
    1cbe:	95 81       	ldd	r25, Z+5	; 0x05
    1cc0:	8c 93       	st	X, r24

			 // Set Timer2 Compare Match Value
			 OCR2 = Timer_Config->Timer_Compare_value;
    1cc2:	a3 e4       	ldi	r26, 0x43	; 67
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cca:	86 81       	ldd	r24, Z+6	; 0x06
    1ccc:	97 81       	ldd	r25, Z+7	; 0x07
    1cce:	8c 93       	st	X, r24

			 // Timer2 Compare Match Interrupt Enable
			 TIMSK |= (1 << OCIE2);
    1cd0:	a9 e5       	ldi	r26, 0x59	; 89
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e9 e5       	ldi	r30, 0x59	; 89
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	80 68       	ori	r24, 0x80	; 128
    1cdc:	8c 93       	st	X, r24

			// Global Interrupt Enable (I-bit)
			SREG  |= (1<<7);
    1cde:	af e5       	ldi	r26, 0x5F	; 95
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	ef e5       	ldi	r30, 0x5F	; 95
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	80 68       	ori	r24, 0x80	; 128
    1cea:	8c 93       	st	X, r24
		}
	}
}
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	08 95       	ret

00001cf6 <Timer0_setCallBack>:
/**********************************************************************************************************/
/*
 * Description: Function to set the Call Back function address of Timer0.
 */
void Timer0_setCallBack(void(*T0_ptr)(void))
{
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <Timer0_setCallBack+0x6>
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	9a 83       	std	Y+2, r25	; 0x02
    1d02:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr0 = T0_ptr;
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	9a 81       	ldd	r25, Y+2	; 0x02
    1d08:	90 93 9e 01 	sts	0x019E, r25
    1d0c:	80 93 9d 01 	sts	0x019D, r24
}
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <Timer1_setCallBack>:

/*
 * Description: Function to set the Call Back function address of Timer1.
 */
void Timer1_setCallBack(void(*T1_ptr)(void))
{
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <Timer1_setCallBack+0x6>
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	9a 83       	std	Y+2, r25	; 0x02
    1d26:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr1 = T1_ptr;
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2c:	90 93 a0 01 	sts	0x01A0, r25
    1d30:	80 93 9f 01 	sts	0x019F, r24
}
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <Timer2_setCallBack>:

/*
 * Description: Function to set the Call Back function address of Timer2.
 */
void Timer2_setCallBack(void(*T2_ptr)(void))
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <Timer2_setCallBack+0x6>
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	9a 83       	std	Y+2, r25	; 0x02
    1d4a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr2 = T2_ptr;
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d50:	90 93 a2 01 	sts	0x01A2, r25
    1d54:	80 93 a1 01 	sts	0x01A1, r24
}
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <Icu_DeInit>:

/*
 * Description: Function to disable the Timer driver
 */
void Icu_DeInit(Timer_Number Timer_ID)
{
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <Icu_DeInit+0x6>
    1d68:	0f 92       	push	r0
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	89 83       	std	Y+1, r24	; 0x01
	switch(Timer_ID)
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	3b 83       	std	Y+3, r19	; 0x03
    1d78:	2a 83       	std	Y+2, r18	; 0x02
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	91 05       	cpc	r25, r1
    1d82:	51 f1       	breq	.+84     	; 0x1dd8 <Icu_DeInit+0x76>
    1d84:	2a 81       	ldd	r18, Y+2	; 0x02
    1d86:	3b 81       	ldd	r19, Y+3	; 0x03
    1d88:	22 30       	cpi	r18, 0x02	; 2
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <Icu_DeInit+0x2e>
    1d8e:	48 c0       	rjmp	.+144    	; 0x1e20 <Icu_DeInit+0xbe>
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	9b 81       	ldd	r25, Y+3	; 0x03
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	09 f0       	breq	.+2      	; 0x1d9a <Icu_DeInit+0x38>
    1d98:	61 c0       	rjmp	.+194    	; 0x1e5c <Icu_DeInit+0xfa>
	{
		case Timer0:

			TCCR0 = 0;
    1d9a:	e3 e5       	ldi	r30, 0x53	; 83
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	10 82       	st	Z, r1
			TCNT0 = 0;
    1da0:	e2 e5       	ldi	r30, 0x52	; 82
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	10 82       	st	Z, r1
			OCR0 = 0;
    1da6:	ec e5       	ldi	r30, 0x5C	; 92
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	10 82       	st	Z, r1

			// Timer0 Overflow Interrupt Disable
			TIMSK &= ~(1 << TOIE0);
    1dac:	a9 e5       	ldi	r26, 0x59	; 89
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e9 e5       	ldi	r30, 0x59	; 89
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	8e 7f       	andi	r24, 0xFE	; 254
    1db8:	8c 93       	st	X, r24

			// Timer0 Compare Match Interrupt Disable
			TIMSK &= ~(1 << OCIE0);
    1dba:	a9 e5       	ldi	r26, 0x59	; 89
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e9 e5       	ldi	r30, 0x59	; 89
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	8d 7f       	andi	r24, 0xFD	; 253
    1dc6:	8c 93       	st	X, r24

			// Global Interrupt Disable (I-bit)
			SREG  &= ~(1<<7);
    1dc8:	af e5       	ldi	r26, 0x5F	; 95
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	ef e5       	ldi	r30, 0x5F	; 95
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	8f 77       	andi	r24, 0x7F	; 127
    1dd4:	8c 93       	st	X, r24
    1dd6:	42 c0       	rjmp	.+132    	; 0x1e5c <Icu_DeInit+0xfa>
			break;


		case Timer1:
			TCCR1A = 0;
    1dd8:	ef e4       	ldi	r30, 0x4F	; 79
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	10 82       	st	Z, r1
			TCCR1B = 0;
    1dde:	ee e4       	ldi	r30, 0x4E	; 78
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	10 82       	st	Z, r1
			TCNT1 = 0;
    1de4:	ec e4       	ldi	r30, 0x4C	; 76
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	11 82       	std	Z+1, r1	; 0x01
    1dea:	10 82       	st	Z, r1
			OCR1A = 0;
    1dec:	ea e4       	ldi	r30, 0x4A	; 74
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	11 82       	std	Z+1, r1	; 0x01
    1df2:	10 82       	st	Z, r1

			// Timer1 Overflow Interrupt Disable
			TIMSK &= ~(1<<TOIE1);
    1df4:	a9 e5       	ldi	r26, 0x59	; 89
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e9 e5       	ldi	r30, 0x59	; 89
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	8b 7f       	andi	r24, 0xFB	; 251
    1e00:	8c 93       	st	X, r24

			// Timer1 Compare Match Interrupt Disable (Channel A)
			TIMSK &= ~(1 << OCIE1A);
    1e02:	a9 e5       	ldi	r26, 0x59	; 89
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e9 e5       	ldi	r30, 0x59	; 89
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	8f 7e       	andi	r24, 0xEF	; 239
    1e0e:	8c 93       	st	X, r24

			// Global Interrupt Disable (I-bit)
			SREG  &= ~(1<<7);
    1e10:	af e5       	ldi	r26, 0x5F	; 95
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	ef e5       	ldi	r30, 0x5F	; 95
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	8f 77       	andi	r24, 0x7F	; 127
    1e1c:	8c 93       	st	X, r24
    1e1e:	1e c0       	rjmp	.+60     	; 0x1e5c <Icu_DeInit+0xfa>
			break;


		case Timer2:
			TCCR2 = 0;
    1e20:	e5 e4       	ldi	r30, 0x45	; 69
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	10 82       	st	Z, r1
			TCNT2 = 0;
    1e26:	e4 e4       	ldi	r30, 0x44	; 68
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	10 82       	st	Z, r1
			OCR2 = 0;
    1e2c:	e3 e4       	ldi	r30, 0x43	; 67
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	10 82       	st	Z, r1

			// Timer2 Overflow Interrupt Disable
			TIMSK &= ~(1 << TOIE2);
    1e32:	a9 e5       	ldi	r26, 0x59	; 89
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e9 e5       	ldi	r30, 0x59	; 89
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	8f 7b       	andi	r24, 0xBF	; 191
    1e3e:	8c 93       	st	X, r24

			// Timer2 Compare Match Interrupt Disable
			 TIMSK &= ~(1 << OCIE2);
    1e40:	a9 e5       	ldi	r26, 0x59	; 89
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e9 e5       	ldi	r30, 0x59	; 89
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	8f 77       	andi	r24, 0x7F	; 127
    1e4c:	8c 93       	st	X, r24

			// Global Interrupt Disable (I-bit)
			SREG  &= ~(1<<7);
    1e4e:	af e5       	ldi	r26, 0x5F	; 95
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	ef e5       	ldi	r30, 0x5F	; 95
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	8f 77       	andi	r24, 0x7F	; 127
    1e5a:	8c 93       	st	X, r24
			break;

	}
}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <GPIO_setupPinDirection+0x6>
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <GPIO_setupPinDirection+0x8>
    1e70:	0f 92       	push	r0
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	6a 83       	std	Y+2, r22	; 0x02
    1e7a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	88 30       	cpi	r24, 0x08	; 8
    1e80:	08 f0       	brcs	.+2      	; 0x1e84 <GPIO_setupPinDirection+0x1c>
    1e82:	d5 c0       	rjmp	.+426    	; 0x202e <GPIO_setupPinDirection+0x1c6>
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	84 30       	cpi	r24, 0x04	; 4
    1e88:	08 f0       	brcs	.+2      	; 0x1e8c <GPIO_setupPinDirection+0x24>
    1e8a:	d1 c0       	rjmp	.+418    	; 0x202e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	3d 83       	std	Y+5, r19	; 0x05
    1e94:	2c 83       	std	Y+4, r18	; 0x04
    1e96:	8c 81       	ldd	r24, Y+4	; 0x04
    1e98:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9a:	81 30       	cpi	r24, 0x01	; 1
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <GPIO_setupPinDirection+0x3a>
    1ea0:	43 c0       	rjmp	.+134    	; 0x1f28 <GPIO_setupPinDirection+0xc0>
    1ea2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea6:	22 30       	cpi	r18, 0x02	; 2
    1ea8:	31 05       	cpc	r19, r1
    1eaa:	2c f4       	brge	.+10     	; 0x1eb6 <GPIO_setupPinDirection+0x4e>
    1eac:	8c 81       	ldd	r24, Y+4	; 0x04
    1eae:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	71 f0       	breq	.+28     	; 0x1ed0 <GPIO_setupPinDirection+0x68>
    1eb4:	bc c0       	rjmp	.+376    	; 0x202e <GPIO_setupPinDirection+0x1c6>
    1eb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eba:	22 30       	cpi	r18, 0x02	; 2
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <GPIO_setupPinDirection+0x5a>
    1ec0:	5f c0       	rjmp	.+190    	; 0x1f80 <GPIO_setupPinDirection+0x118>
    1ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec6:	83 30       	cpi	r24, 0x03	; 3
    1ec8:	91 05       	cpc	r25, r1
    1eca:	09 f4       	brne	.+2      	; 0x1ece <GPIO_setupPinDirection+0x66>
    1ecc:	85 c0       	rjmp	.+266    	; 0x1fd8 <GPIO_setupPinDirection+0x170>
    1ece:	af c0       	rjmp	.+350    	; 0x202e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	81 30       	cpi	r24, 0x01	; 1
    1ed4:	a1 f4       	brne	.+40     	; 0x1efe <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1ed6:	aa e3       	ldi	r26, 0x3A	; 58
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	ea e3       	ldi	r30, 0x3A	; 58
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	48 2f       	mov	r20, r24
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	02 2e       	mov	r0, r18
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <GPIO_setupPinDirection+0x8c>
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	0a 94       	dec	r0
    1ef6:	e2 f7       	brpl	.-8      	; 0x1ef0 <GPIO_setupPinDirection+0x88>
    1ef8:	84 2b       	or	r24, r20
    1efa:	8c 93       	st	X, r24
    1efc:	98 c0       	rjmp	.+304    	; 0x202e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1efe:	aa e3       	ldi	r26, 0x3A	; 58
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	ea e3       	ldi	r30, 0x3A	; 58
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	48 2f       	mov	r20, r24
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	02 2e       	mov	r0, r18
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <GPIO_setupPinDirection+0xb4>
    1f18:	88 0f       	add	r24, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	0a 94       	dec	r0
    1f1e:	e2 f7       	brpl	.-8      	; 0x1f18 <GPIO_setupPinDirection+0xb0>
    1f20:	80 95       	com	r24
    1f22:	84 23       	and	r24, r20
    1f24:	8c 93       	st	X, r24
    1f26:	83 c0       	rjmp	.+262    	; 0x202e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	a1 f4       	brne	.+40     	; 0x1f56 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1f2e:	a7 e3       	ldi	r26, 0x37	; 55
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e7 e3       	ldi	r30, 0x37	; 55
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	48 2f       	mov	r20, r24
    1f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3c:	28 2f       	mov	r18, r24
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	02 2e       	mov	r0, r18
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <GPIO_setupPinDirection+0xe4>
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	0a 94       	dec	r0
    1f4e:	e2 f7       	brpl	.-8      	; 0x1f48 <GPIO_setupPinDirection+0xe0>
    1f50:	84 2b       	or	r24, r20
    1f52:	8c 93       	st	X, r24
    1f54:	6c c0       	rjmp	.+216    	; 0x202e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1f56:	a7 e3       	ldi	r26, 0x37	; 55
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e7 e3       	ldi	r30, 0x37	; 55
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	48 2f       	mov	r20, r24
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	28 2f       	mov	r18, r24
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	02 2e       	mov	r0, r18
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <GPIO_setupPinDirection+0x10c>
    1f70:	88 0f       	add	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	0a 94       	dec	r0
    1f76:	e2 f7       	brpl	.-8      	; 0x1f70 <GPIO_setupPinDirection+0x108>
    1f78:	80 95       	com	r24
    1f7a:	84 23       	and	r24, r20
    1f7c:	8c 93       	st	X, r24
    1f7e:	57 c0       	rjmp	.+174    	; 0x202e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	81 30       	cpi	r24, 0x01	; 1
    1f84:	a1 f4       	brne	.+40     	; 0x1fae <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1f86:	a4 e3       	ldi	r26, 0x34	; 52
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e4 e3       	ldi	r30, 0x34	; 52
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	48 2f       	mov	r20, r24
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	02 2e       	mov	r0, r18
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <GPIO_setupPinDirection+0x13c>
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	0a 94       	dec	r0
    1fa6:	e2 f7       	brpl	.-8      	; 0x1fa0 <GPIO_setupPinDirection+0x138>
    1fa8:	84 2b       	or	r24, r20
    1faa:	8c 93       	st	X, r24
    1fac:	40 c0       	rjmp	.+128    	; 0x202e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1fae:	a4 e3       	ldi	r26, 0x34	; 52
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e4 e3       	ldi	r30, 0x34	; 52
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	48 2f       	mov	r20, r24
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	02 2e       	mov	r0, r18
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <GPIO_setupPinDirection+0x164>
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	0a 94       	dec	r0
    1fce:	e2 f7       	brpl	.-8      	; 0x1fc8 <GPIO_setupPinDirection+0x160>
    1fd0:	80 95       	com	r24
    1fd2:	84 23       	and	r24, r20
    1fd4:	8c 93       	st	X, r24
    1fd6:	2b c0       	rjmp	.+86     	; 0x202e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	81 30       	cpi	r24, 0x01	; 1
    1fdc:	a1 f4       	brne	.+40     	; 0x2006 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1fde:	a1 e3       	ldi	r26, 0x31	; 49
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e1 e3       	ldi	r30, 0x31	; 49
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	48 2f       	mov	r20, r24
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	28 2f       	mov	r18, r24
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	02 2e       	mov	r0, r18
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <GPIO_setupPinDirection+0x194>
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	0a 94       	dec	r0
    1ffe:	e2 f7       	brpl	.-8      	; 0x1ff8 <GPIO_setupPinDirection+0x190>
    2000:	84 2b       	or	r24, r20
    2002:	8c 93       	st	X, r24
    2004:	14 c0       	rjmp	.+40     	; 0x202e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2006:	a1 e3       	ldi	r26, 0x31	; 49
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e1 e3       	ldi	r30, 0x31	; 49
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	48 2f       	mov	r20, r24
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	28 2f       	mov	r18, r24
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	02 2e       	mov	r0, r18
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <GPIO_setupPinDirection+0x1bc>
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	0a 94       	dec	r0
    2026:	e2 f7       	brpl	.-8      	; 0x2020 <GPIO_setupPinDirection+0x1b8>
    2028:	80 95       	com	r24
    202a:	84 23       	and	r24, r20
    202c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	00 d0       	rcall	.+0      	; 0x2044 <GPIO_writePin+0x6>
    2044:	00 d0       	rcall	.+0      	; 0x2046 <GPIO_writePin+0x8>
    2046:	0f 92       	push	r0
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	6a 83       	std	Y+2, r22	; 0x02
    2050:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	88 30       	cpi	r24, 0x08	; 8
    2056:	08 f0       	brcs	.+2      	; 0x205a <GPIO_writePin+0x1c>
    2058:	d5 c0       	rjmp	.+426    	; 0x2204 <GPIO_writePin+0x1c6>
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	84 30       	cpi	r24, 0x04	; 4
    205e:	08 f0       	brcs	.+2      	; 0x2062 <GPIO_writePin+0x24>
    2060:	d1 c0       	rjmp	.+418    	; 0x2204 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	3d 83       	std	Y+5, r19	; 0x05
    206a:	2c 83       	std	Y+4, r18	; 0x04
    206c:	8c 81       	ldd	r24, Y+4	; 0x04
    206e:	9d 81       	ldd	r25, Y+5	; 0x05
    2070:	81 30       	cpi	r24, 0x01	; 1
    2072:	91 05       	cpc	r25, r1
    2074:	09 f4       	brne	.+2      	; 0x2078 <GPIO_writePin+0x3a>
    2076:	43 c0       	rjmp	.+134    	; 0x20fe <GPIO_writePin+0xc0>
    2078:	2c 81       	ldd	r18, Y+4	; 0x04
    207a:	3d 81       	ldd	r19, Y+5	; 0x05
    207c:	22 30       	cpi	r18, 0x02	; 2
    207e:	31 05       	cpc	r19, r1
    2080:	2c f4       	brge	.+10     	; 0x208c <GPIO_writePin+0x4e>
    2082:	8c 81       	ldd	r24, Y+4	; 0x04
    2084:	9d 81       	ldd	r25, Y+5	; 0x05
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	71 f0       	breq	.+28     	; 0x20a6 <GPIO_writePin+0x68>
    208a:	bc c0       	rjmp	.+376    	; 0x2204 <GPIO_writePin+0x1c6>
    208c:	2c 81       	ldd	r18, Y+4	; 0x04
    208e:	3d 81       	ldd	r19, Y+5	; 0x05
    2090:	22 30       	cpi	r18, 0x02	; 2
    2092:	31 05       	cpc	r19, r1
    2094:	09 f4       	brne	.+2      	; 0x2098 <GPIO_writePin+0x5a>
    2096:	5f c0       	rjmp	.+190    	; 0x2156 <GPIO_writePin+0x118>
    2098:	8c 81       	ldd	r24, Y+4	; 0x04
    209a:	9d 81       	ldd	r25, Y+5	; 0x05
    209c:	83 30       	cpi	r24, 0x03	; 3
    209e:	91 05       	cpc	r25, r1
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <GPIO_writePin+0x66>
    20a2:	85 c0       	rjmp	.+266    	; 0x21ae <GPIO_writePin+0x170>
    20a4:	af c0       	rjmp	.+350    	; 0x2204 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	81 30       	cpi	r24, 0x01	; 1
    20aa:	a1 f4       	brne	.+40     	; 0x20d4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    20ac:	ab e3       	ldi	r26, 0x3B	; 59
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	eb e3       	ldi	r30, 0x3B	; 59
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	48 2f       	mov	r20, r24
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	02 2e       	mov	r0, r18
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <GPIO_writePin+0x8c>
    20c6:	88 0f       	add	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	0a 94       	dec	r0
    20cc:	e2 f7       	brpl	.-8      	; 0x20c6 <GPIO_writePin+0x88>
    20ce:	84 2b       	or	r24, r20
    20d0:	8c 93       	st	X, r24
    20d2:	98 c0       	rjmp	.+304    	; 0x2204 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    20d4:	ab e3       	ldi	r26, 0x3B	; 59
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	eb e3       	ldi	r30, 0x3B	; 59
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	48 2f       	mov	r20, r24
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	02 2e       	mov	r0, r18
    20ec:	02 c0       	rjmp	.+4      	; 0x20f2 <GPIO_writePin+0xb4>
    20ee:	88 0f       	add	r24, r24
    20f0:	99 1f       	adc	r25, r25
    20f2:	0a 94       	dec	r0
    20f4:	e2 f7       	brpl	.-8      	; 0x20ee <GPIO_writePin+0xb0>
    20f6:	80 95       	com	r24
    20f8:	84 23       	and	r24, r20
    20fa:	8c 93       	st	X, r24
    20fc:	83 c0       	rjmp	.+262    	; 0x2204 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	81 30       	cpi	r24, 0x01	; 1
    2102:	a1 f4       	brne	.+40     	; 0x212c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2104:	a8 e3       	ldi	r26, 0x38	; 56
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e8 e3       	ldi	r30, 0x38	; 56
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	48 2f       	mov	r20, r24
    2110:	8a 81       	ldd	r24, Y+2	; 0x02
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	02 2e       	mov	r0, r18
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <GPIO_writePin+0xe4>
    211e:	88 0f       	add	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	0a 94       	dec	r0
    2124:	e2 f7       	brpl	.-8      	; 0x211e <GPIO_writePin+0xe0>
    2126:	84 2b       	or	r24, r20
    2128:	8c 93       	st	X, r24
    212a:	6c c0       	rjmp	.+216    	; 0x2204 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    212c:	a8 e3       	ldi	r26, 0x38	; 56
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e8 e3       	ldi	r30, 0x38	; 56
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	48 2f       	mov	r20, r24
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	28 2f       	mov	r18, r24
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	02 2e       	mov	r0, r18
    2144:	02 c0       	rjmp	.+4      	; 0x214a <GPIO_writePin+0x10c>
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	0a 94       	dec	r0
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <GPIO_writePin+0x108>
    214e:	80 95       	com	r24
    2150:	84 23       	and	r24, r20
    2152:	8c 93       	st	X, r24
    2154:	57 c0       	rjmp	.+174    	; 0x2204 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	81 30       	cpi	r24, 0x01	; 1
    215a:	a1 f4       	brne	.+40     	; 0x2184 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    215c:	a5 e3       	ldi	r26, 0x35	; 53
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e5 e3       	ldi	r30, 0x35	; 53
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	48 2f       	mov	r20, r24
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	28 2f       	mov	r18, r24
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	02 2e       	mov	r0, r18
    2174:	02 c0       	rjmp	.+4      	; 0x217a <GPIO_writePin+0x13c>
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	0a 94       	dec	r0
    217c:	e2 f7       	brpl	.-8      	; 0x2176 <GPIO_writePin+0x138>
    217e:	84 2b       	or	r24, r20
    2180:	8c 93       	st	X, r24
    2182:	40 c0       	rjmp	.+128    	; 0x2204 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2184:	a5 e3       	ldi	r26, 0x35	; 53
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e5 e3       	ldi	r30, 0x35	; 53
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	48 2f       	mov	r20, r24
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	28 2f       	mov	r18, r24
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	02 2e       	mov	r0, r18
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <GPIO_writePin+0x164>
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	0a 94       	dec	r0
    21a4:	e2 f7       	brpl	.-8      	; 0x219e <GPIO_writePin+0x160>
    21a6:	80 95       	com	r24
    21a8:	84 23       	and	r24, r20
    21aa:	8c 93       	st	X, r24
    21ac:	2b c0       	rjmp	.+86     	; 0x2204 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	81 30       	cpi	r24, 0x01	; 1
    21b2:	a1 f4       	brne	.+40     	; 0x21dc <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    21b4:	a2 e3       	ldi	r26, 0x32	; 50
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e2 e3       	ldi	r30, 0x32	; 50
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	48 2f       	mov	r20, r24
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	02 2e       	mov	r0, r18
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <GPIO_writePin+0x194>
    21ce:	88 0f       	add	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	0a 94       	dec	r0
    21d4:	e2 f7       	brpl	.-8      	; 0x21ce <GPIO_writePin+0x190>
    21d6:	84 2b       	or	r24, r20
    21d8:	8c 93       	st	X, r24
    21da:	14 c0       	rjmp	.+40     	; 0x2204 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    21dc:	a2 e3       	ldi	r26, 0x32	; 50
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e2 e3       	ldi	r30, 0x32	; 50
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	48 2f       	mov	r20, r24
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	28 2f       	mov	r18, r24
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	02 2e       	mov	r0, r18
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <GPIO_writePin+0x1bc>
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	0a 94       	dec	r0
    21fc:	e2 f7       	brpl	.-8      	; 0x21f6 <GPIO_writePin+0x1b8>
    21fe:	80 95       	com	r24
    2200:	84 23       	and	r24, r20
    2202:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	00 d0       	rcall	.+0      	; 0x221a <GPIO_readPin+0x6>
    221a:	00 d0       	rcall	.+0      	; 0x221c <GPIO_readPin+0x8>
    221c:	0f 92       	push	r0
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	8a 83       	std	Y+2, r24	; 0x02
    2224:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2226:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	88 30       	cpi	r24, 0x08	; 8
    222c:	08 f0       	brcs	.+2      	; 0x2230 <GPIO_readPin+0x1c>
    222e:	84 c0       	rjmp	.+264    	; 0x2338 <GPIO_readPin+0x124>
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	84 30       	cpi	r24, 0x04	; 4
    2234:	08 f0       	brcs	.+2      	; 0x2238 <GPIO_readPin+0x24>
    2236:	80 c0       	rjmp	.+256    	; 0x2338 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	3d 83       	std	Y+5, r19	; 0x05
    2240:	2c 83       	std	Y+4, r18	; 0x04
    2242:	4c 81       	ldd	r20, Y+4	; 0x04
    2244:	5d 81       	ldd	r21, Y+5	; 0x05
    2246:	41 30       	cpi	r20, 0x01	; 1
    2248:	51 05       	cpc	r21, r1
    224a:	79 f1       	breq	.+94     	; 0x22aa <GPIO_readPin+0x96>
    224c:	8c 81       	ldd	r24, Y+4	; 0x04
    224e:	9d 81       	ldd	r25, Y+5	; 0x05
    2250:	82 30       	cpi	r24, 0x02	; 2
    2252:	91 05       	cpc	r25, r1
    2254:	34 f4       	brge	.+12     	; 0x2262 <GPIO_readPin+0x4e>
    2256:	2c 81       	ldd	r18, Y+4	; 0x04
    2258:	3d 81       	ldd	r19, Y+5	; 0x05
    225a:	21 15       	cp	r18, r1
    225c:	31 05       	cpc	r19, r1
    225e:	69 f0       	breq	.+26     	; 0x227a <GPIO_readPin+0x66>
    2260:	6b c0       	rjmp	.+214    	; 0x2338 <GPIO_readPin+0x124>
    2262:	4c 81       	ldd	r20, Y+4	; 0x04
    2264:	5d 81       	ldd	r21, Y+5	; 0x05
    2266:	42 30       	cpi	r20, 0x02	; 2
    2268:	51 05       	cpc	r21, r1
    226a:	b9 f1       	breq	.+110    	; 0x22da <GPIO_readPin+0xc6>
    226c:	8c 81       	ldd	r24, Y+4	; 0x04
    226e:	9d 81       	ldd	r25, Y+5	; 0x05
    2270:	83 30       	cpi	r24, 0x03	; 3
    2272:	91 05       	cpc	r25, r1
    2274:	09 f4       	brne	.+2      	; 0x2278 <GPIO_readPin+0x64>
    2276:	49 c0       	rjmp	.+146    	; 0x230a <GPIO_readPin+0xf6>
    2278:	5f c0       	rjmp	.+190    	; 0x2338 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    227a:	e9 e3       	ldi	r30, 0x39	; 57
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	28 2f       	mov	r18, r24
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	88 2f       	mov	r24, r24
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	a9 01       	movw	r20, r18
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <GPIO_readPin+0x7e>
    228e:	55 95       	asr	r21
    2290:	47 95       	ror	r20
    2292:	8a 95       	dec	r24
    2294:	e2 f7       	brpl	.-8      	; 0x228e <GPIO_readPin+0x7a>
    2296:	ca 01       	movw	r24, r20
    2298:	81 70       	andi	r24, 0x01	; 1
    229a:	90 70       	andi	r25, 0x00	; 0
    229c:	88 23       	and	r24, r24
    229e:	19 f0       	breq	.+6      	; 0x22a6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	89 83       	std	Y+1, r24	; 0x01
    22a4:	49 c0       	rjmp	.+146    	; 0x2338 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    22a6:	19 82       	std	Y+1, r1	; 0x01
    22a8:	47 c0       	rjmp	.+142    	; 0x2338 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    22aa:	e6 e3       	ldi	r30, 0x36	; 54
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	88 2f       	mov	r24, r24
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	a9 01       	movw	r20, r18
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <GPIO_readPin+0xae>
    22be:	55 95       	asr	r21
    22c0:	47 95       	ror	r20
    22c2:	8a 95       	dec	r24
    22c4:	e2 f7       	brpl	.-8      	; 0x22be <GPIO_readPin+0xaa>
    22c6:	ca 01       	movw	r24, r20
    22c8:	81 70       	andi	r24, 0x01	; 1
    22ca:	90 70       	andi	r25, 0x00	; 0
    22cc:	88 23       	and	r24, r24
    22ce:	19 f0       	breq	.+6      	; 0x22d6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	31 c0       	rjmp	.+98     	; 0x2338 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    22d6:	19 82       	std	Y+1, r1	; 0x01
    22d8:	2f c0       	rjmp	.+94     	; 0x2338 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    22da:	e3 e3       	ldi	r30, 0x33	; 51
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	88 2f       	mov	r24, r24
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	a9 01       	movw	r20, r18
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <GPIO_readPin+0xde>
    22ee:	55 95       	asr	r21
    22f0:	47 95       	ror	r20
    22f2:	8a 95       	dec	r24
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <GPIO_readPin+0xda>
    22f6:	ca 01       	movw	r24, r20
    22f8:	81 70       	andi	r24, 0x01	; 1
    22fa:	90 70       	andi	r25, 0x00	; 0
    22fc:	88 23       	and	r24, r24
    22fe:	19 f0       	breq	.+6      	; 0x2306 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	19 c0       	rjmp	.+50     	; 0x2338 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2306:	19 82       	std	Y+1, r1	; 0x01
    2308:	17 c0       	rjmp	.+46     	; 0x2338 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    230a:	e0 e3       	ldi	r30, 0x30	; 48
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	88 2f       	mov	r24, r24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	a9 01       	movw	r20, r18
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <GPIO_readPin+0x10e>
    231e:	55 95       	asr	r21
    2320:	47 95       	ror	r20
    2322:	8a 95       	dec	r24
    2324:	e2 f7       	brpl	.-8      	; 0x231e <GPIO_readPin+0x10a>
    2326:	ca 01       	movw	r24, r20
    2328:	81 70       	andi	r24, 0x01	; 1
    232a:	90 70       	andi	r25, 0x00	; 0
    232c:	88 23       	and	r24, r24
    232e:	19 f0       	breq	.+6      	; 0x2336 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	01 c0       	rjmp	.+2      	; 0x2338 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2336:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2338:	89 81       	ldd	r24, Y+1	; 0x01
}
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	00 d0       	rcall	.+0      	; 0x2350 <GPIO_setupPortDirection+0x6>
    2350:	00 d0       	rcall	.+0      	; 0x2352 <GPIO_setupPortDirection+0x8>
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	84 30       	cpi	r24, 0x04	; 4
    235e:	90 f5       	brcc	.+100    	; 0x23c4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	3c 83       	std	Y+4, r19	; 0x04
    2368:	2b 83       	std	Y+3, r18	; 0x03
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	9c 81       	ldd	r25, Y+4	; 0x04
    236e:	81 30       	cpi	r24, 0x01	; 1
    2370:	91 05       	cpc	r25, r1
    2372:	d1 f0       	breq	.+52     	; 0x23a8 <GPIO_setupPortDirection+0x5e>
    2374:	2b 81       	ldd	r18, Y+3	; 0x03
    2376:	3c 81       	ldd	r19, Y+4	; 0x04
    2378:	22 30       	cpi	r18, 0x02	; 2
    237a:	31 05       	cpc	r19, r1
    237c:	2c f4       	brge	.+10     	; 0x2388 <GPIO_setupPortDirection+0x3e>
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	9c 81       	ldd	r25, Y+4	; 0x04
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	61 f0       	breq	.+24     	; 0x239e <GPIO_setupPortDirection+0x54>
    2386:	1e c0       	rjmp	.+60     	; 0x23c4 <GPIO_setupPortDirection+0x7a>
    2388:	2b 81       	ldd	r18, Y+3	; 0x03
    238a:	3c 81       	ldd	r19, Y+4	; 0x04
    238c:	22 30       	cpi	r18, 0x02	; 2
    238e:	31 05       	cpc	r19, r1
    2390:	81 f0       	breq	.+32     	; 0x23b2 <GPIO_setupPortDirection+0x68>
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	83 30       	cpi	r24, 0x03	; 3
    2398:	91 05       	cpc	r25, r1
    239a:	81 f0       	breq	.+32     	; 0x23bc <GPIO_setupPortDirection+0x72>
    239c:	13 c0       	rjmp	.+38     	; 0x23c4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    239e:	ea e3       	ldi	r30, 0x3A	; 58
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	8a 81       	ldd	r24, Y+2	; 0x02
    23a4:	80 83       	st	Z, r24
    23a6:	0e c0       	rjmp	.+28     	; 0x23c4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    23a8:	e7 e3       	ldi	r30, 0x37	; 55
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	80 83       	st	Z, r24
    23b0:	09 c0       	rjmp	.+18     	; 0x23c4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    23b2:	e4 e3       	ldi	r30, 0x34	; 52
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	8a 81       	ldd	r24, Y+2	; 0x02
    23b8:	80 83       	st	Z, r24
    23ba:	04 c0       	rjmp	.+8      	; 0x23c4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    23bc:	e1 e3       	ldi	r30, 0x31	; 49
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	80 83       	st	Z, r24
			break;
		}
	}
}
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <GPIO_writePort+0x6>
    23d8:	00 d0       	rcall	.+0      	; 0x23da <GPIO_writePort+0x8>
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	89 83       	std	Y+1, r24	; 0x01
    23e0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	84 30       	cpi	r24, 0x04	; 4
    23e6:	90 f5       	brcc	.+100    	; 0x244c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	3c 83       	std	Y+4, r19	; 0x04
    23f0:	2b 83       	std	Y+3, r18	; 0x03
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	9c 81       	ldd	r25, Y+4	; 0x04
    23f6:	81 30       	cpi	r24, 0x01	; 1
    23f8:	91 05       	cpc	r25, r1
    23fa:	d1 f0       	breq	.+52     	; 0x2430 <GPIO_writePort+0x5e>
    23fc:	2b 81       	ldd	r18, Y+3	; 0x03
    23fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2400:	22 30       	cpi	r18, 0x02	; 2
    2402:	31 05       	cpc	r19, r1
    2404:	2c f4       	brge	.+10     	; 0x2410 <GPIO_writePort+0x3e>
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	9c 81       	ldd	r25, Y+4	; 0x04
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	61 f0       	breq	.+24     	; 0x2426 <GPIO_writePort+0x54>
    240e:	1e c0       	rjmp	.+60     	; 0x244c <GPIO_writePort+0x7a>
    2410:	2b 81       	ldd	r18, Y+3	; 0x03
    2412:	3c 81       	ldd	r19, Y+4	; 0x04
    2414:	22 30       	cpi	r18, 0x02	; 2
    2416:	31 05       	cpc	r19, r1
    2418:	81 f0       	breq	.+32     	; 0x243a <GPIO_writePort+0x68>
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	9c 81       	ldd	r25, Y+4	; 0x04
    241e:	83 30       	cpi	r24, 0x03	; 3
    2420:	91 05       	cpc	r25, r1
    2422:	81 f0       	breq	.+32     	; 0x2444 <GPIO_writePort+0x72>
    2424:	13 c0       	rjmp	.+38     	; 0x244c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2426:	eb e3       	ldi	r30, 0x3B	; 59
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	8a 81       	ldd	r24, Y+2	; 0x02
    242c:	80 83       	st	Z, r24
    242e:	0e c0       	rjmp	.+28     	; 0x244c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2430:	e8 e3       	ldi	r30, 0x38	; 56
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	8a 81       	ldd	r24, Y+2	; 0x02
    2436:	80 83       	st	Z, r24
    2438:	09 c0       	rjmp	.+18     	; 0x244c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    243a:	e5 e3       	ldi	r30, 0x35	; 53
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	80 83       	st	Z, r24
    2442:	04 c0       	rjmp	.+8      	; 0x244c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2444:	e2 e3       	ldi	r30, 0x32	; 50
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	80 83       	st	Z, r24
			break;
		}
	}
}
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	08 95       	ret

0000245a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    245a:	df 93       	push	r29
    245c:	cf 93       	push	r28
    245e:	00 d0       	rcall	.+0      	; 0x2460 <GPIO_readPort+0x6>
    2460:	00 d0       	rcall	.+0      	; 0x2462 <GPIO_readPort+0x8>
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2468:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	84 30       	cpi	r24, 0x04	; 4
    246e:	90 f5       	brcc	.+100    	; 0x24d4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	28 2f       	mov	r18, r24
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	3c 83       	std	Y+4, r19	; 0x04
    2478:	2b 83       	std	Y+3, r18	; 0x03
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	9c 81       	ldd	r25, Y+4	; 0x04
    247e:	81 30       	cpi	r24, 0x01	; 1
    2480:	91 05       	cpc	r25, r1
    2482:	d1 f0       	breq	.+52     	; 0x24b8 <GPIO_readPort+0x5e>
    2484:	2b 81       	ldd	r18, Y+3	; 0x03
    2486:	3c 81       	ldd	r19, Y+4	; 0x04
    2488:	22 30       	cpi	r18, 0x02	; 2
    248a:	31 05       	cpc	r19, r1
    248c:	2c f4       	brge	.+10     	; 0x2498 <GPIO_readPort+0x3e>
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	9c 81       	ldd	r25, Y+4	; 0x04
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	61 f0       	breq	.+24     	; 0x24ae <GPIO_readPort+0x54>
    2496:	1e c0       	rjmp	.+60     	; 0x24d4 <GPIO_readPort+0x7a>
    2498:	2b 81       	ldd	r18, Y+3	; 0x03
    249a:	3c 81       	ldd	r19, Y+4	; 0x04
    249c:	22 30       	cpi	r18, 0x02	; 2
    249e:	31 05       	cpc	r19, r1
    24a0:	81 f0       	breq	.+32     	; 0x24c2 <GPIO_readPort+0x68>
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	9c 81       	ldd	r25, Y+4	; 0x04
    24a6:	83 30       	cpi	r24, 0x03	; 3
    24a8:	91 05       	cpc	r25, r1
    24aa:	81 f0       	breq	.+32     	; 0x24cc <GPIO_readPort+0x72>
    24ac:	13 c0       	rjmp	.+38     	; 0x24d4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    24ae:	e9 e3       	ldi	r30, 0x39	; 57
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	89 83       	std	Y+1, r24	; 0x01
    24b6:	0e c0       	rjmp	.+28     	; 0x24d4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    24b8:	e6 e3       	ldi	r30, 0x36	; 54
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	89 83       	std	Y+1, r24	; 0x01
    24c0:	09 c0       	rjmp	.+18     	; 0x24d4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    24c2:	e3 e3       	ldi	r30, 0x33	; 51
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	89 83       	std	Y+1, r24	; 0x01
    24ca:	04 c0       	rjmp	.+8      	; 0x24d4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    24cc:	e0 e3       	ldi	r30, 0x30	; 48
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	08 95       	ret

000024e4 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <KEYPAD_getPressedKey+0x6>
    24ea:	0f 92       	push	r0
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    24f0:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    24f2:	1b 82       	std	Y+3, r1	; 0x03
    24f4:	43 c0       	rjmp	.+134    	; 0x257c <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	60 e0       	ldi	r22, 0x00	; 0
    24fa:	0e 94 a5 11 	call	0x234a	; 0x234a <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	98 2f       	mov	r25, r24
    2502:	9c 5f       	subi	r25, 0xFC	; 252
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	69 2f       	mov	r22, r25
    2508:	41 e0       	ldi	r20, 0x01	; 1
    250a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	88 2f       	mov	r24, r24
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9c 01       	movw	r18, r24
    2516:	2c 5f       	subi	r18, 0xFC	; 252
    2518:	3f 4f       	sbci	r19, 0xFF	; 255
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	02 c0       	rjmp	.+4      	; 0x2524 <KEYPAD_getPressedKey+0x40>
    2520:	88 0f       	add	r24, r24
    2522:	99 1f       	adc	r25, r25
    2524:	2a 95       	dec	r18
    2526:	e2 f7       	brpl	.-8      	; 0x2520 <KEYPAD_getPressedKey+0x3c>
    2528:	80 95       	com	r24
    252a:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	69 81       	ldd	r22, Y+1	; 0x01
    2530:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2534:	1a 82       	std	Y+2, r1	; 0x02
    2536:	1c c0       	rjmp	.+56     	; 0x2570 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	6a 81       	ldd	r22, Y+2	; 0x02
    253c:	0e 94 0a 11 	call	0x2214	; 0x2214 <GPIO_readPin>
    2540:	88 23       	and	r24, r24
    2542:	99 f4       	brne	.+38     	; 0x256a <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	88 2f       	mov	r24, r24
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	88 0f       	add	r24, r24
    254c:	99 1f       	adc	r25, r25
    254e:	88 0f       	add	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	98 2f       	mov	r25, r24
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	89 0f       	add	r24, r25
    2558:	8f 5f       	subi	r24, 0xFF	; 255
    255a:	0e 94 c3 12 	call	0x2586	; 0x2586 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	8f 5f       	subi	r24, 0xFF	; 255
    256e:	8a 83       	std	Y+2, r24	; 0x02
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	84 30       	cpi	r24, 0x04	; 4
    2574:	08 f3       	brcs	.-62     	; 0x2538 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	8f 5f       	subi	r24, 0xFF	; 255
    257a:	8b 83       	std	Y+3, r24	; 0x03
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	84 30       	cpi	r24, 0x04	; 4
    2580:	08 f4       	brcc	.+2      	; 0x2584 <KEYPAD_getPressedKey+0xa0>
    2582:	b9 cf       	rjmp	.-142    	; 0x24f6 <KEYPAD_getPressedKey+0x12>
    2584:	b6 cf       	rjmp	.-148    	; 0x24f2 <KEYPAD_getPressedKey+0xe>

00002586 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	00 d0       	rcall	.+0      	; 0x258c <KEYPAD_4x4_adjustKeyNumber+0x6>
    258c:	00 d0       	rcall	.+0      	; 0x258e <KEYPAD_4x4_adjustKeyNumber+0x8>
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2594:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2596:	8a 81       	ldd	r24, Y+2	; 0x02
    2598:	28 2f       	mov	r18, r24
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	3c 83       	std	Y+4, r19	; 0x04
    259e:	2b 83       	std	Y+3, r18	; 0x03
    25a0:	8b 81       	ldd	r24, Y+3	; 0x03
    25a2:	9c 81       	ldd	r25, Y+4	; 0x04
    25a4:	88 30       	cpi	r24, 0x08	; 8
    25a6:	91 05       	cpc	r25, r1
    25a8:	09 f4       	brne	.+2      	; 0x25ac <KEYPAD_4x4_adjustKeyNumber+0x26>
    25aa:	70 c0       	rjmp	.+224    	; 0x268c <KEYPAD_4x4_adjustKeyNumber+0x106>
    25ac:	2b 81       	ldd	r18, Y+3	; 0x03
    25ae:	3c 81       	ldd	r19, Y+4	; 0x04
    25b0:	29 30       	cpi	r18, 0x09	; 9
    25b2:	31 05       	cpc	r19, r1
    25b4:	5c f5       	brge	.+86     	; 0x260c <KEYPAD_4x4_adjustKeyNumber+0x86>
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ba:	84 30       	cpi	r24, 0x04	; 4
    25bc:	91 05       	cpc	r25, r1
    25be:	09 f4       	brne	.+2      	; 0x25c2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    25c0:	59 c0       	rjmp	.+178    	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0xee>
    25c2:	2b 81       	ldd	r18, Y+3	; 0x03
    25c4:	3c 81       	ldd	r19, Y+4	; 0x04
    25c6:	25 30       	cpi	r18, 0x05	; 5
    25c8:	31 05       	cpc	r19, r1
    25ca:	9c f4       	brge	.+38     	; 0x25f2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	9c 81       	ldd	r25, Y+4	; 0x04
    25d0:	82 30       	cpi	r24, 0x02	; 2
    25d2:	91 05       	cpc	r25, r1
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <KEYPAD_4x4_adjustKeyNumber+0x52>
    25d6:	48 c0       	rjmp	.+144    	; 0x2668 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    25d8:	2b 81       	ldd	r18, Y+3	; 0x03
    25da:	3c 81       	ldd	r19, Y+4	; 0x04
    25dc:	23 30       	cpi	r18, 0x03	; 3
    25de:	31 05       	cpc	r19, r1
    25e0:	0c f0       	brlt	.+2      	; 0x25e4 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    25e2:	45 c0       	rjmp	.+138    	; 0x266e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    25e4:	8b 81       	ldd	r24, Y+3	; 0x03
    25e6:	9c 81       	ldd	r25, Y+4	; 0x04
    25e8:	81 30       	cpi	r24, 0x01	; 1
    25ea:	91 05       	cpc	r25, r1
    25ec:	09 f4       	brne	.+2      	; 0x25f0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    25ee:	39 c0       	rjmp	.+114    	; 0x2662 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    25f0:	67 c0       	rjmp	.+206    	; 0x26c0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    25f2:	2b 81       	ldd	r18, Y+3	; 0x03
    25f4:	3c 81       	ldd	r19, Y+4	; 0x04
    25f6:	26 30       	cpi	r18, 0x06	; 6
    25f8:	31 05       	cpc	r19, r1
    25fa:	09 f4       	brne	.+2      	; 0x25fe <KEYPAD_4x4_adjustKeyNumber+0x78>
    25fc:	41 c0       	rjmp	.+130    	; 0x2680 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	9c 81       	ldd	r25, Y+4	; 0x04
    2602:	87 30       	cpi	r24, 0x07	; 7
    2604:	91 05       	cpc	r25, r1
    2606:	0c f0       	brlt	.+2      	; 0x260a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2608:	3e c0       	rjmp	.+124    	; 0x2686 <KEYPAD_4x4_adjustKeyNumber+0x100>
    260a:	37 c0       	rjmp	.+110    	; 0x267a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    260c:	2b 81       	ldd	r18, Y+3	; 0x03
    260e:	3c 81       	ldd	r19, Y+4	; 0x04
    2610:	2c 30       	cpi	r18, 0x0C	; 12
    2612:	31 05       	cpc	r19, r1
    2614:	09 f4       	brne	.+2      	; 0x2618 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2616:	46 c0       	rjmp	.+140    	; 0x26a4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	9c 81       	ldd	r25, Y+4	; 0x04
    261c:	8d 30       	cpi	r24, 0x0D	; 13
    261e:	91 05       	cpc	r25, r1
    2620:	5c f4       	brge	.+22     	; 0x2638 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2622:	2b 81       	ldd	r18, Y+3	; 0x03
    2624:	3c 81       	ldd	r19, Y+4	; 0x04
    2626:	2a 30       	cpi	r18, 0x0A	; 10
    2628:	31 05       	cpc	r19, r1
    262a:	b1 f1       	breq	.+108    	; 0x2698 <KEYPAD_4x4_adjustKeyNumber+0x112>
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	9c 81       	ldd	r25, Y+4	; 0x04
    2630:	8b 30       	cpi	r24, 0x0B	; 11
    2632:	91 05       	cpc	r25, r1
    2634:	a4 f5       	brge	.+104    	; 0x269e <KEYPAD_4x4_adjustKeyNumber+0x118>
    2636:	2d c0       	rjmp	.+90     	; 0x2692 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2638:	2b 81       	ldd	r18, Y+3	; 0x03
    263a:	3c 81       	ldd	r19, Y+4	; 0x04
    263c:	2e 30       	cpi	r18, 0x0E	; 14
    263e:	31 05       	cpc	r19, r1
    2640:	b9 f1       	breq	.+110    	; 0x26b0 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	9c 81       	ldd	r25, Y+4	; 0x04
    2646:	8e 30       	cpi	r24, 0x0E	; 14
    2648:	91 05       	cpc	r25, r1
    264a:	7c f1       	brlt	.+94     	; 0x26aa <KEYPAD_4x4_adjustKeyNumber+0x124>
    264c:	2b 81       	ldd	r18, Y+3	; 0x03
    264e:	3c 81       	ldd	r19, Y+4	; 0x04
    2650:	2f 30       	cpi	r18, 0x0F	; 15
    2652:	31 05       	cpc	r19, r1
    2654:	79 f1       	breq	.+94     	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2656:	8b 81       	ldd	r24, Y+3	; 0x03
    2658:	9c 81       	ldd	r25, Y+4	; 0x04
    265a:	80 31       	cpi	r24, 0x10	; 16
    265c:	91 05       	cpc	r25, r1
    265e:	69 f1       	breq	.+90     	; 0x26ba <KEYPAD_4x4_adjustKeyNumber+0x134>
    2660:	2f c0       	rjmp	.+94     	; 0x26c0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2662:	87 e0       	ldi	r24, 0x07	; 7
    2664:	89 83       	std	Y+1, r24	; 0x01
    2666:	2e c0       	rjmp	.+92     	; 0x26c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2668:	88 e0       	ldi	r24, 0x08	; 8
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	2b c0       	rjmp	.+86     	; 0x26c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    266e:	89 e0       	ldi	r24, 0x09	; 9
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	28 c0       	rjmp	.+80     	; 0x26c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2674:	85 e2       	ldi	r24, 0x25	; 37
    2676:	89 83       	std	Y+1, r24	; 0x01
    2678:	25 c0       	rjmp	.+74     	; 0x26c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    267a:	84 e0       	ldi	r24, 0x04	; 4
    267c:	89 83       	std	Y+1, r24	; 0x01
    267e:	22 c0       	rjmp	.+68     	; 0x26c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2680:	85 e0       	ldi	r24, 0x05	; 5
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	1f c0       	rjmp	.+62     	; 0x26c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2686:	86 e0       	ldi	r24, 0x06	; 6
    2688:	89 83       	std	Y+1, r24	; 0x01
    268a:	1c c0       	rjmp	.+56     	; 0x26c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    268c:	8a e2       	ldi	r24, 0x2A	; 42
    268e:	89 83       	std	Y+1, r24	; 0x01
    2690:	19 c0       	rjmp	.+50     	; 0x26c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	16 c0       	rjmp	.+44     	; 0x26c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2698:	82 e0       	ldi	r24, 0x02	; 2
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	13 c0       	rjmp	.+38     	; 0x26c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    269e:	83 e0       	ldi	r24, 0x03	; 3
    26a0:	89 83       	std	Y+1, r24	; 0x01
    26a2:	10 c0       	rjmp	.+32     	; 0x26c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    26a4:	8d e2       	ldi	r24, 0x2D	; 45
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	0d c0       	rjmp	.+26     	; 0x26c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    26aa:	8d e0       	ldi	r24, 0x0D	; 13
    26ac:	89 83       	std	Y+1, r24	; 0x01
    26ae:	0a c0       	rjmp	.+20     	; 0x26c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    26b0:	19 82       	std	Y+1, r1	; 0x01
    26b2:	08 c0       	rjmp	.+16     	; 0x26c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    26b4:	8d e3       	ldi	r24, 0x3D	; 61
    26b6:	89 83       	std	Y+1, r24	; 0x01
    26b8:	05 c0       	rjmp	.+10     	; 0x26c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    26ba:	8b e2       	ldi	r24, 0x2B	; 43
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	02 c0       	rjmp	.+4      	; 0x26c4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    26c0:	8a 81       	ldd	r24, Y+2	; 0x02
    26c2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
} 
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	08 95       	ret

000026d4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    26dc:	83 e0       	ldi	r24, 0x03	; 3
    26de:	64 e0       	ldi	r22, 0x04	; 4
    26e0:	41 e0       	ldi	r20, 0x01	; 1
    26e2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    26e6:	83 e0       	ldi	r24, 0x03	; 3
    26e8:	65 e0       	ldi	r22, 0x05	; 5
    26ea:	41 e0       	ldi	r20, 0x01	; 1
    26ec:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    26f0:	83 e0       	ldi	r24, 0x03	; 3
    26f2:	66 e0       	ldi	r22, 0x06	; 6
    26f4:	41 e0       	ldi	r20, 0x01	; 1
    26f6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	6f ef       	ldi	r22, 0xFF	; 255
    26fe:	0e 94 a5 11 	call	0x234a	; 0x234a <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2702:	88 e3       	ldi	r24, 0x38	; 56
    2704:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2708:	8c e0       	ldi	r24, 0x0C	; 12
    270a:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_sendCommand>
}
    2714:	cf 91       	pop	r28
    2716:	df 91       	pop	r29
    2718:	08 95       	ret

0000271a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    271a:	df 93       	push	r29
    271c:	cf 93       	push	r28
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	e9 97       	sbiw	r28, 0x39	; 57
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	89 af       	std	Y+57, r24	; 0x39
#if (LCD_DATA_BITS_MODE == 4)
		uint8 lcd_port_value = 0;
#endif

	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2730:	83 e0       	ldi	r24, 0x03	; 3
    2732:	64 e0       	ldi	r22, 0x04	; 4
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	0e 94 1f 10 	call	0x203e	; 0x203e <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    273a:	83 e0       	ldi	r24, 0x03	; 3
    273c:	65 e0       	ldi	r22, 0x05	; 5
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	0e 94 1f 10 	call	0x203e	; 0x203e <GPIO_writePin>
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	a0 e8       	ldi	r26, 0x80	; 128
    274a:	bf e3       	ldi	r27, 0x3F	; 63
    274c:	8d ab       	std	Y+53, r24	; 0x35
    274e:	9e ab       	std	Y+54, r25	; 0x36
    2750:	af ab       	std	Y+55, r26	; 0x37
    2752:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2754:	6d a9       	ldd	r22, Y+53	; 0x35
    2756:	7e a9       	ldd	r23, Y+54	; 0x36
    2758:	8f a9       	ldd	r24, Y+55	; 0x37
    275a:	98 ad       	ldd	r25, Y+56	; 0x38
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	4a ef       	ldi	r20, 0xFA	; 250
    2762:	54 e4       	ldi	r21, 0x44	; 68
    2764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	89 ab       	std	Y+49, r24	; 0x31
    276e:	9a ab       	std	Y+50, r25	; 0x32
    2770:	ab ab       	std	Y+51, r26	; 0x33
    2772:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2774:	69 a9       	ldd	r22, Y+49	; 0x31
    2776:	7a a9       	ldd	r23, Y+50	; 0x32
    2778:	8b a9       	ldd	r24, Y+51	; 0x33
    277a:	9c a9       	ldd	r25, Y+52	; 0x34
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	40 e8       	ldi	r20, 0x80	; 128
    2782:	5f e3       	ldi	r21, 0x3F	; 63
    2784:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2788:	88 23       	and	r24, r24
    278a:	2c f4       	brge	.+10     	; 0x2796 <LCD_sendCommand+0x7c>
		__ticks = 1;
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	98 ab       	std	Y+48, r25	; 0x30
    2792:	8f a7       	std	Y+47, r24	; 0x2f
    2794:	3f c0       	rjmp	.+126    	; 0x2814 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    2796:	69 a9       	ldd	r22, Y+49	; 0x31
    2798:	7a a9       	ldd	r23, Y+50	; 0x32
    279a:	8b a9       	ldd	r24, Y+51	; 0x33
    279c:	9c a9       	ldd	r25, Y+52	; 0x34
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	3f ef       	ldi	r19, 0xFF	; 255
    27a2:	4f e7       	ldi	r20, 0x7F	; 127
    27a4:	57 e4       	ldi	r21, 0x47	; 71
    27a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27aa:	18 16       	cp	r1, r24
    27ac:	4c f5       	brge	.+82     	; 0x2800 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ae:	6d a9       	ldd	r22, Y+53	; 0x35
    27b0:	7e a9       	ldd	r23, Y+54	; 0x36
    27b2:	8f a9       	ldd	r24, Y+55	; 0x37
    27b4:	98 ad       	ldd	r25, Y+56	; 0x38
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e2       	ldi	r20, 0x20	; 32
    27bc:	51 e4       	ldi	r21, 0x41	; 65
    27be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	bc 01       	movw	r22, r24
    27c8:	cd 01       	movw	r24, r26
    27ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	98 ab       	std	Y+48, r25	; 0x30
    27d4:	8f a7       	std	Y+47, r24	; 0x2f
    27d6:	0f c0       	rjmp	.+30     	; 0x27f6 <LCD_sendCommand+0xdc>
    27d8:	88 ec       	ldi	r24, 0xC8	; 200
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	9e a7       	std	Y+46, r25	; 0x2e
    27de:	8d a7       	std	Y+45, r24	; 0x2d
    27e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    27e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	f1 f7       	brne	.-4      	; 0x27e4 <LCD_sendCommand+0xca>
    27e8:	9e a7       	std	Y+46, r25	; 0x2e
    27ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ee:	98 a9       	ldd	r25, Y+48	; 0x30
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	98 ab       	std	Y+48, r25	; 0x30
    27f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27f8:	98 a9       	ldd	r25, Y+48	; 0x30
    27fa:	00 97       	sbiw	r24, 0x00	; 0
    27fc:	69 f7       	brne	.-38     	; 0x27d8 <LCD_sendCommand+0xbe>
    27fe:	14 c0       	rjmp	.+40     	; 0x2828 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2800:	69 a9       	ldd	r22, Y+49	; 0x31
    2802:	7a a9       	ldd	r23, Y+50	; 0x32
    2804:	8b a9       	ldd	r24, Y+51	; 0x33
    2806:	9c a9       	ldd	r25, Y+52	; 0x34
    2808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	98 ab       	std	Y+48, r25	; 0x30
    2812:	8f a7       	std	Y+47, r24	; 0x2f
    2814:	8f a5       	ldd	r24, Y+47	; 0x2f
    2816:	98 a9       	ldd	r25, Y+48	; 0x30
    2818:	9c a7       	std	Y+44, r25	; 0x2c
    281a:	8b a7       	std	Y+43, r24	; 0x2b
    281c:	8b a5       	ldd	r24, Y+43	; 0x2b
    281e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	f1 f7       	brne	.-4      	; 0x2820 <LCD_sendCommand+0x106>
    2824:	9c a7       	std	Y+44, r25	; 0x2c
    2826:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2828:	83 e0       	ldi	r24, 0x03	; 3
    282a:	66 e0       	ldi	r22, 0x06	; 6
    282c:	41 e0       	ldi	r20, 0x01	; 1
    282e:	0e 94 1f 10 	call	0x203e	; 0x203e <GPIO_writePin>
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	a0 e8       	ldi	r26, 0x80	; 128
    2838:	bf e3       	ldi	r27, 0x3F	; 63
    283a:	8f a3       	std	Y+39, r24	; 0x27
    283c:	98 a7       	std	Y+40, r25	; 0x28
    283e:	a9 a7       	std	Y+41, r26	; 0x29
    2840:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2842:	6f a1       	ldd	r22, Y+39	; 0x27
    2844:	78 a5       	ldd	r23, Y+40	; 0x28
    2846:	89 a5       	ldd	r24, Y+41	; 0x29
    2848:	9a a5       	ldd	r25, Y+42	; 0x2a
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	4a ef       	ldi	r20, 0xFA	; 250
    2850:	54 e4       	ldi	r21, 0x44	; 68
    2852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	8b a3       	std	Y+35, r24	; 0x23
    285c:	9c a3       	std	Y+36, r25	; 0x24
    285e:	ad a3       	std	Y+37, r26	; 0x25
    2860:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2862:	6b a1       	ldd	r22, Y+35	; 0x23
    2864:	7c a1       	ldd	r23, Y+36	; 0x24
    2866:	8d a1       	ldd	r24, Y+37	; 0x25
    2868:	9e a1       	ldd	r25, Y+38	; 0x26
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e8       	ldi	r20, 0x80	; 128
    2870:	5f e3       	ldi	r21, 0x3F	; 63
    2872:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2876:	88 23       	and	r24, r24
    2878:	2c f4       	brge	.+10     	; 0x2884 <LCD_sendCommand+0x16a>
		__ticks = 1;
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	9a a3       	std	Y+34, r25	; 0x22
    2880:	89 a3       	std	Y+33, r24	; 0x21
    2882:	3f c0       	rjmp	.+126    	; 0x2902 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2884:	6b a1       	ldd	r22, Y+35	; 0x23
    2886:	7c a1       	ldd	r23, Y+36	; 0x24
    2888:	8d a1       	ldd	r24, Y+37	; 0x25
    288a:	9e a1       	ldd	r25, Y+38	; 0x26
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	3f ef       	ldi	r19, 0xFF	; 255
    2890:	4f e7       	ldi	r20, 0x7F	; 127
    2892:	57 e4       	ldi	r21, 0x47	; 71
    2894:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2898:	18 16       	cp	r1, r24
    289a:	4c f5       	brge	.+82     	; 0x28ee <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289c:	6f a1       	ldd	r22, Y+39	; 0x27
    289e:	78 a5       	ldd	r23, Y+40	; 0x28
    28a0:	89 a5       	ldd	r24, Y+41	; 0x29
    28a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e2       	ldi	r20, 0x20	; 32
    28aa:	51 e4       	ldi	r21, 0x41	; 65
    28ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	bc 01       	movw	r22, r24
    28b6:	cd 01       	movw	r24, r26
    28b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	9a a3       	std	Y+34, r25	; 0x22
    28c2:	89 a3       	std	Y+33, r24	; 0x21
    28c4:	0f c0       	rjmp	.+30     	; 0x28e4 <LCD_sendCommand+0x1ca>
    28c6:	88 ec       	ldi	r24, 0xC8	; 200
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	98 a3       	std	Y+32, r25	; 0x20
    28cc:	8f 8f       	std	Y+31, r24	; 0x1f
    28ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28d0:	98 a1       	ldd	r25, Y+32	; 0x20
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	f1 f7       	brne	.-4      	; 0x28d2 <LCD_sendCommand+0x1b8>
    28d6:	98 a3       	std	Y+32, r25	; 0x20
    28d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28da:	89 a1       	ldd	r24, Y+33	; 0x21
    28dc:	9a a1       	ldd	r25, Y+34	; 0x22
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	9a a3       	std	Y+34, r25	; 0x22
    28e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e4:	89 a1       	ldd	r24, Y+33	; 0x21
    28e6:	9a a1       	ldd	r25, Y+34	; 0x22
    28e8:	00 97       	sbiw	r24, 0x00	; 0
    28ea:	69 f7       	brne	.-38     	; 0x28c6 <LCD_sendCommand+0x1ac>
    28ec:	14 c0       	rjmp	.+40     	; 0x2916 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ee:	6b a1       	ldd	r22, Y+35	; 0x23
    28f0:	7c a1       	ldd	r23, Y+36	; 0x24
    28f2:	8d a1       	ldd	r24, Y+37	; 0x25
    28f4:	9e a1       	ldd	r25, Y+38	; 0x26
    28f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	9a a3       	std	Y+34, r25	; 0x22
    2900:	89 a3       	std	Y+33, r24	; 0x21
    2902:	89 a1       	ldd	r24, Y+33	; 0x21
    2904:	9a a1       	ldd	r25, Y+34	; 0x22
    2906:	9e 8f       	std	Y+30, r25	; 0x1e
    2908:	8d 8f       	std	Y+29, r24	; 0x1d
    290a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    290c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	f1 f7       	brne	.-4      	; 0x290e <LCD_sendCommand+0x1f4>
    2912:	9e 8f       	std	Y+30, r25	; 0x1e
    2914:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	69 ad       	ldd	r22, Y+57	; 0x39
    291a:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <GPIO_writePort>
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	a0 e8       	ldi	r26, 0x80	; 128
    2924:	bf e3       	ldi	r27, 0x3F	; 63
    2926:	89 8f       	std	Y+25, r24	; 0x19
    2928:	9a 8f       	std	Y+26, r25	; 0x1a
    292a:	ab 8f       	std	Y+27, r26	; 0x1b
    292c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292e:	69 8d       	ldd	r22, Y+25	; 0x19
    2930:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2932:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2934:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	4a ef       	ldi	r20, 0xFA	; 250
    293c:	54 e4       	ldi	r21, 0x44	; 68
    293e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	8d 8b       	std	Y+21, r24	; 0x15
    2948:	9e 8b       	std	Y+22, r25	; 0x16
    294a:	af 8b       	std	Y+23, r26	; 0x17
    294c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    294e:	6d 89       	ldd	r22, Y+21	; 0x15
    2950:	7e 89       	ldd	r23, Y+22	; 0x16
    2952:	8f 89       	ldd	r24, Y+23	; 0x17
    2954:	98 8d       	ldd	r25, Y+24	; 0x18
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e8       	ldi	r20, 0x80	; 128
    295c:	5f e3       	ldi	r21, 0x3F	; 63
    295e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2962:	88 23       	and	r24, r24
    2964:	2c f4       	brge	.+10     	; 0x2970 <LCD_sendCommand+0x256>
		__ticks = 1;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	9c 8b       	std	Y+20, r25	; 0x14
    296c:	8b 8b       	std	Y+19, r24	; 0x13
    296e:	3f c0       	rjmp	.+126    	; 0x29ee <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    2970:	6d 89       	ldd	r22, Y+21	; 0x15
    2972:	7e 89       	ldd	r23, Y+22	; 0x16
    2974:	8f 89       	ldd	r24, Y+23	; 0x17
    2976:	98 8d       	ldd	r25, Y+24	; 0x18
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	3f ef       	ldi	r19, 0xFF	; 255
    297c:	4f e7       	ldi	r20, 0x7F	; 127
    297e:	57 e4       	ldi	r21, 0x47	; 71
    2980:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2984:	18 16       	cp	r1, r24
    2986:	4c f5       	brge	.+82     	; 0x29da <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2988:	69 8d       	ldd	r22, Y+25	; 0x19
    298a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    298c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    298e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e2       	ldi	r20, 0x20	; 32
    2996:	51 e4       	ldi	r21, 0x41	; 65
    2998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	bc 01       	movw	r22, r24
    29a2:	cd 01       	movw	r24, r26
    29a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	9c 8b       	std	Y+20, r25	; 0x14
    29ae:	8b 8b       	std	Y+19, r24	; 0x13
    29b0:	0f c0       	rjmp	.+30     	; 0x29d0 <LCD_sendCommand+0x2b6>
    29b2:	88 ec       	ldi	r24, 0xC8	; 200
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	9a 8b       	std	Y+18, r25	; 0x12
    29b8:	89 8b       	std	Y+17, r24	; 0x11
    29ba:	89 89       	ldd	r24, Y+17	; 0x11
    29bc:	9a 89       	ldd	r25, Y+18	; 0x12
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	f1 f7       	brne	.-4      	; 0x29be <LCD_sendCommand+0x2a4>
    29c2:	9a 8b       	std	Y+18, r25	; 0x12
    29c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c6:	8b 89       	ldd	r24, Y+19	; 0x13
    29c8:	9c 89       	ldd	r25, Y+20	; 0x14
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	9c 8b       	std	Y+20, r25	; 0x14
    29ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d0:	8b 89       	ldd	r24, Y+19	; 0x13
    29d2:	9c 89       	ldd	r25, Y+20	; 0x14
    29d4:	00 97       	sbiw	r24, 0x00	; 0
    29d6:	69 f7       	brne	.-38     	; 0x29b2 <LCD_sendCommand+0x298>
    29d8:	14 c0       	rjmp	.+40     	; 0x2a02 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29da:	6d 89       	ldd	r22, Y+21	; 0x15
    29dc:	7e 89       	ldd	r23, Y+22	; 0x16
    29de:	8f 89       	ldd	r24, Y+23	; 0x17
    29e0:	98 8d       	ldd	r25, Y+24	; 0x18
    29e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	9c 8b       	std	Y+20, r25	; 0x14
    29ec:	8b 8b       	std	Y+19, r24	; 0x13
    29ee:	8b 89       	ldd	r24, Y+19	; 0x13
    29f0:	9c 89       	ldd	r25, Y+20	; 0x14
    29f2:	98 8b       	std	Y+16, r25	; 0x10
    29f4:	8f 87       	std	Y+15, r24	; 0x0f
    29f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29f8:	98 89       	ldd	r25, Y+16	; 0x10
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	f1 f7       	brne	.-4      	; 0x29fa <LCD_sendCommand+0x2e0>
    29fe:	98 8b       	std	Y+16, r25	; 0x10
    2a00:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a02:	83 e0       	ldi	r24, 0x03	; 3
    2a04:	66 e0       	ldi	r22, 0x06	; 6
    2a06:	40 e0       	ldi	r20, 0x00	; 0
    2a08:	0e 94 1f 10 	call	0x203e	; 0x203e <GPIO_writePin>
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	a0 e8       	ldi	r26, 0x80	; 128
    2a12:	bf e3       	ldi	r27, 0x3F	; 63
    2a14:	8b 87       	std	Y+11, r24	; 0x0b
    2a16:	9c 87       	std	Y+12, r25	; 0x0c
    2a18:	ad 87       	std	Y+13, r26	; 0x0d
    2a1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	4a ef       	ldi	r20, 0xFA	; 250
    2a2a:	54 e4       	ldi	r21, 0x44	; 68
    2a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	8f 83       	std	Y+7, r24	; 0x07
    2a36:	98 87       	std	Y+8, r25	; 0x08
    2a38:	a9 87       	std	Y+9, r26	; 0x09
    2a3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a3e:	78 85       	ldd	r23, Y+8	; 0x08
    2a40:	89 85       	ldd	r24, Y+9	; 0x09
    2a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e8       	ldi	r20, 0x80	; 128
    2a4a:	5f e3       	ldi	r21, 0x3F	; 63
    2a4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a50:	88 23       	and	r24, r24
    2a52:	2c f4       	brge	.+10     	; 0x2a5e <LCD_sendCommand+0x344>
		__ticks = 1;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	9e 83       	std	Y+6, r25	; 0x06
    2a5a:	8d 83       	std	Y+5, r24	; 0x05
    2a5c:	3f c0       	rjmp	.+126    	; 0x2adc <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    2a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a60:	78 85       	ldd	r23, Y+8	; 0x08
    2a62:	89 85       	ldd	r24, Y+9	; 0x09
    2a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	3f ef       	ldi	r19, 0xFF	; 255
    2a6a:	4f e7       	ldi	r20, 0x7F	; 127
    2a6c:	57 e4       	ldi	r21, 0x47	; 71
    2a6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a72:	18 16       	cp	r1, r24
    2a74:	4c f5       	brge	.+82     	; 0x2ac8 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	40 e2       	ldi	r20, 0x20	; 32
    2a84:	51 e4       	ldi	r21, 0x41	; 65
    2a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	bc 01       	movw	r22, r24
    2a90:	cd 01       	movw	r24, r26
    2a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	9e 83       	std	Y+6, r25	; 0x06
    2a9c:	8d 83       	std	Y+5, r24	; 0x05
    2a9e:	0f c0       	rjmp	.+30     	; 0x2abe <LCD_sendCommand+0x3a4>
    2aa0:	88 ec       	ldi	r24, 0xC8	; 200
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	9c 83       	std	Y+4, r25	; 0x04
    2aa6:	8b 83       	std	Y+3, r24	; 0x03
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	f1 f7       	brne	.-4      	; 0x2aac <LCD_sendCommand+0x392>
    2ab0:	9c 83       	std	Y+4, r25	; 0x04
    2ab2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	9e 83       	std	Y+6, r25	; 0x06
    2abc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	69 f7       	brne	.-38     	; 0x2aa0 <LCD_sendCommand+0x386>
    2ac6:	14 c0       	rjmp	.+40     	; 0x2af0 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aca:	78 85       	ldd	r23, Y+8	; 0x08
    2acc:	89 85       	ldd	r24, Y+9	; 0x09
    2ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	9e 83       	std	Y+6, r25	; 0x06
    2ada:	8d 83       	std	Y+5, r24	; 0x05
    2adc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ade:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae0:	9a 83       	std	Y+2, r25	; 0x02
    2ae2:	89 83       	std	Y+1, r24	; 0x01
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <LCD_sendCommand+0x3ce>
    2aec:	9a 83       	std	Y+2, r25	; 0x02
    2aee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2af0:	e9 96       	adiw	r28, 0x39	; 57
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	de bf       	out	0x3e, r29	; 62
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	cd bf       	out	0x3d, r28	; 61
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <LCD_displayCharacter>:
 * Description :
 * Display the required character on the screen
 * Same As Send_command() Function But RS = 1
 */
void LCD_displayCharacter(uint8 data)
{
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
    2b0a:	e9 97       	sbiw	r28, 0x39	; 57
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	89 af       	std	Y+57, r24	; 0x39
#if (LCD_DATA_BITS_MODE == 4)
	uint8 lcd_port_value = 0;
#endif

	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2b18:	83 e0       	ldi	r24, 0x03	; 3
    2b1a:	64 e0       	ldi	r22, 0x04	; 4
    2b1c:	41 e0       	ldi	r20, 0x01	; 1
    2b1e:	0e 94 1f 10 	call	0x203e	; 0x203e <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2b22:	83 e0       	ldi	r24, 0x03	; 3
    2b24:	65 e0       	ldi	r22, 0x05	; 5
    2b26:	40 e0       	ldi	r20, 0x00	; 0
    2b28:	0e 94 1f 10 	call	0x203e	; 0x203e <GPIO_writePin>
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	a0 e8       	ldi	r26, 0x80	; 128
    2b32:	bf e3       	ldi	r27, 0x3F	; 63
    2b34:	8d ab       	std	Y+53, r24	; 0x35
    2b36:	9e ab       	std	Y+54, r25	; 0x36
    2b38:	af ab       	std	Y+55, r26	; 0x37
    2b3a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b3c:	6d a9       	ldd	r22, Y+53	; 0x35
    2b3e:	7e a9       	ldd	r23, Y+54	; 0x36
    2b40:	8f a9       	ldd	r24, Y+55	; 0x37
    2b42:	98 ad       	ldd	r25, Y+56	; 0x38
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	4a ef       	ldi	r20, 0xFA	; 250
    2b4a:	54 e4       	ldi	r21, 0x44	; 68
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	89 ab       	std	Y+49, r24	; 0x31
    2b56:	9a ab       	std	Y+50, r25	; 0x32
    2b58:	ab ab       	std	Y+51, r26	; 0x33
    2b5a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b5c:	69 a9       	ldd	r22, Y+49	; 0x31
    2b5e:	7a a9       	ldd	r23, Y+50	; 0x32
    2b60:	8b a9       	ldd	r24, Y+51	; 0x33
    2b62:	9c a9       	ldd	r25, Y+52	; 0x34
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	40 e8       	ldi	r20, 0x80	; 128
    2b6a:	5f e3       	ldi	r21, 0x3F	; 63
    2b6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b70:	88 23       	and	r24, r24
    2b72:	2c f4       	brge	.+10     	; 0x2b7e <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	98 ab       	std	Y+48, r25	; 0x30
    2b7a:	8f a7       	std	Y+47, r24	; 0x2f
    2b7c:	3f c0       	rjmp	.+126    	; 0x2bfc <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2b7e:	69 a9       	ldd	r22, Y+49	; 0x31
    2b80:	7a a9       	ldd	r23, Y+50	; 0x32
    2b82:	8b a9       	ldd	r24, Y+51	; 0x33
    2b84:	9c a9       	ldd	r25, Y+52	; 0x34
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	3f ef       	ldi	r19, 0xFF	; 255
    2b8a:	4f e7       	ldi	r20, 0x7F	; 127
    2b8c:	57 e4       	ldi	r21, 0x47	; 71
    2b8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b92:	18 16       	cp	r1, r24
    2b94:	4c f5       	brge	.+82     	; 0x2be8 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b96:	6d a9       	ldd	r22, Y+53	; 0x35
    2b98:	7e a9       	ldd	r23, Y+54	; 0x36
    2b9a:	8f a9       	ldd	r24, Y+55	; 0x37
    2b9c:	98 ad       	ldd	r25, Y+56	; 0x38
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e2       	ldi	r20, 0x20	; 32
    2ba4:	51 e4       	ldi	r21, 0x41	; 65
    2ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	bc 01       	movw	r22, r24
    2bb0:	cd 01       	movw	r24, r26
    2bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	98 ab       	std	Y+48, r25	; 0x30
    2bbc:	8f a7       	std	Y+47, r24	; 0x2f
    2bbe:	0f c0       	rjmp	.+30     	; 0x2bde <LCD_displayCharacter+0xdc>
    2bc0:	88 ec       	ldi	r24, 0xC8	; 200
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	9e a7       	std	Y+46, r25	; 0x2e
    2bc6:	8d a7       	std	Y+45, r24	; 0x2d
    2bc8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bca:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	f1 f7       	brne	.-4      	; 0x2bcc <LCD_displayCharacter+0xca>
    2bd0:	9e a7       	std	Y+46, r25	; 0x2e
    2bd2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bd6:	98 a9       	ldd	r25, Y+48	; 0x30
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	98 ab       	std	Y+48, r25	; 0x30
    2bdc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bde:	8f a5       	ldd	r24, Y+47	; 0x2f
    2be0:	98 a9       	ldd	r25, Y+48	; 0x30
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	69 f7       	brne	.-38     	; 0x2bc0 <LCD_displayCharacter+0xbe>
    2be6:	14 c0       	rjmp	.+40     	; 0x2c10 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be8:	69 a9       	ldd	r22, Y+49	; 0x31
    2bea:	7a a9       	ldd	r23, Y+50	; 0x32
    2bec:	8b a9       	ldd	r24, Y+51	; 0x33
    2bee:	9c a9       	ldd	r25, Y+52	; 0x34
    2bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	98 ab       	std	Y+48, r25	; 0x30
    2bfa:	8f a7       	std	Y+47, r24	; 0x2f
    2bfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bfe:	98 a9       	ldd	r25, Y+48	; 0x30
    2c00:	9c a7       	std	Y+44, r25	; 0x2c
    2c02:	8b a7       	std	Y+43, r24	; 0x2b
    2c04:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c06:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	f1 f7       	brne	.-4      	; 0x2c08 <LCD_displayCharacter+0x106>
    2c0c:	9c a7       	std	Y+44, r25	; 0x2c
    2c0e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2c10:	83 e0       	ldi	r24, 0x03	; 3
    2c12:	66 e0       	ldi	r22, 0x06	; 6
    2c14:	41 e0       	ldi	r20, 0x01	; 1
    2c16:	0e 94 1f 10 	call	0x203e	; 0x203e <GPIO_writePin>
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	a0 e8       	ldi	r26, 0x80	; 128
    2c20:	bf e3       	ldi	r27, 0x3F	; 63
    2c22:	8f a3       	std	Y+39, r24	; 0x27
    2c24:	98 a7       	std	Y+40, r25	; 0x28
    2c26:	a9 a7       	std	Y+41, r26	; 0x29
    2c28:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2a:	6f a1       	ldd	r22, Y+39	; 0x27
    2c2c:	78 a5       	ldd	r23, Y+40	; 0x28
    2c2e:	89 a5       	ldd	r24, Y+41	; 0x29
    2c30:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	4a ef       	ldi	r20, 0xFA	; 250
    2c38:	54 e4       	ldi	r21, 0x44	; 68
    2c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	8b a3       	std	Y+35, r24	; 0x23
    2c44:	9c a3       	std	Y+36, r25	; 0x24
    2c46:	ad a3       	std	Y+37, r26	; 0x25
    2c48:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c4a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c4c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c4e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c50:	9e a1       	ldd	r25, Y+38	; 0x26
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e8       	ldi	r20, 0x80	; 128
    2c58:	5f e3       	ldi	r21, 0x3F	; 63
    2c5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c5e:	88 23       	and	r24, r24
    2c60:	2c f4       	brge	.+10     	; 0x2c6c <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	9a a3       	std	Y+34, r25	; 0x22
    2c68:	89 a3       	std	Y+33, r24	; 0x21
    2c6a:	3f c0       	rjmp	.+126    	; 0x2cea <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2c6c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c6e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c70:	8d a1       	ldd	r24, Y+37	; 0x25
    2c72:	9e a1       	ldd	r25, Y+38	; 0x26
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	3f ef       	ldi	r19, 0xFF	; 255
    2c78:	4f e7       	ldi	r20, 0x7F	; 127
    2c7a:	57 e4       	ldi	r21, 0x47	; 71
    2c7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c80:	18 16       	cp	r1, r24
    2c82:	4c f5       	brge	.+82     	; 0x2cd6 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c84:	6f a1       	ldd	r22, Y+39	; 0x27
    2c86:	78 a5       	ldd	r23, Y+40	; 0x28
    2c88:	89 a5       	ldd	r24, Y+41	; 0x29
    2c8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e2       	ldi	r20, 0x20	; 32
    2c92:	51 e4       	ldi	r21, 0x41	; 65
    2c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	bc 01       	movw	r22, r24
    2c9e:	cd 01       	movw	r24, r26
    2ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	9a a3       	std	Y+34, r25	; 0x22
    2caa:	89 a3       	std	Y+33, r24	; 0x21
    2cac:	0f c0       	rjmp	.+30     	; 0x2ccc <LCD_displayCharacter+0x1ca>
    2cae:	88 ec       	ldi	r24, 0xC8	; 200
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	98 a3       	std	Y+32, r25	; 0x20
    2cb4:	8f 8f       	std	Y+31, r24	; 0x1f
    2cb6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cb8:	98 a1       	ldd	r25, Y+32	; 0x20
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <LCD_displayCharacter+0x1b8>
    2cbe:	98 a3       	std	Y+32, r25	; 0x20
    2cc0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc2:	89 a1       	ldd	r24, Y+33	; 0x21
    2cc4:	9a a1       	ldd	r25, Y+34	; 0x22
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	9a a3       	std	Y+34, r25	; 0x22
    2cca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ccc:	89 a1       	ldd	r24, Y+33	; 0x21
    2cce:	9a a1       	ldd	r25, Y+34	; 0x22
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	69 f7       	brne	.-38     	; 0x2cae <LCD_displayCharacter+0x1ac>
    2cd4:	14 c0       	rjmp	.+40     	; 0x2cfe <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd6:	6b a1       	ldd	r22, Y+35	; 0x23
    2cd8:	7c a1       	ldd	r23, Y+36	; 0x24
    2cda:	8d a1       	ldd	r24, Y+37	; 0x25
    2cdc:	9e a1       	ldd	r25, Y+38	; 0x26
    2cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	9a a3       	std	Y+34, r25	; 0x22
    2ce8:	89 a3       	std	Y+33, r24	; 0x21
    2cea:	89 a1       	ldd	r24, Y+33	; 0x21
    2cec:	9a a1       	ldd	r25, Y+34	; 0x22
    2cee:	9e 8f       	std	Y+30, r25	; 0x1e
    2cf0:	8d 8f       	std	Y+29, r24	; 0x1d
    2cf2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cf4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <LCD_displayCharacter+0x1f4>
    2cfa:	9e 8f       	std	Y+30, r25	; 0x1e
    2cfc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	69 ad       	ldd	r22, Y+57	; 0x39
    2d02:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <GPIO_writePort>
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	a0 e8       	ldi	r26, 0x80	; 128
    2d0c:	bf e3       	ldi	r27, 0x3F	; 63
    2d0e:	89 8f       	std	Y+25, r24	; 0x19
    2d10:	9a 8f       	std	Y+26, r25	; 0x1a
    2d12:	ab 8f       	std	Y+27, r26	; 0x1b
    2d14:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d16:	69 8d       	ldd	r22, Y+25	; 0x19
    2d18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	4a ef       	ldi	r20, 0xFA	; 250
    2d24:	54 e4       	ldi	r21, 0x44	; 68
    2d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	8d 8b       	std	Y+21, r24	; 0x15
    2d30:	9e 8b       	std	Y+22, r25	; 0x16
    2d32:	af 8b       	std	Y+23, r26	; 0x17
    2d34:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d36:	6d 89       	ldd	r22, Y+21	; 0x15
    2d38:	7e 89       	ldd	r23, Y+22	; 0x16
    2d3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	40 e8       	ldi	r20, 0x80	; 128
    2d44:	5f e3       	ldi	r21, 0x3F	; 63
    2d46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d4a:	88 23       	and	r24, r24
    2d4c:	2c f4       	brge	.+10     	; 0x2d58 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	9c 8b       	std	Y+20, r25	; 0x14
    2d54:	8b 8b       	std	Y+19, r24	; 0x13
    2d56:	3f c0       	rjmp	.+126    	; 0x2dd6 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2d58:	6d 89       	ldd	r22, Y+21	; 0x15
    2d5a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d5c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d5e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	3f ef       	ldi	r19, 0xFF	; 255
    2d64:	4f e7       	ldi	r20, 0x7F	; 127
    2d66:	57 e4       	ldi	r21, 0x47	; 71
    2d68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d6c:	18 16       	cp	r1, r24
    2d6e:	4c f5       	brge	.+82     	; 0x2dc2 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d70:	69 8d       	ldd	r22, Y+25	; 0x19
    2d72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	40 e2       	ldi	r20, 0x20	; 32
    2d7e:	51 e4       	ldi	r21, 0x41	; 65
    2d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	bc 01       	movw	r22, r24
    2d8a:	cd 01       	movw	r24, r26
    2d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	9c 8b       	std	Y+20, r25	; 0x14
    2d96:	8b 8b       	std	Y+19, r24	; 0x13
    2d98:	0f c0       	rjmp	.+30     	; 0x2db8 <LCD_displayCharacter+0x2b6>
    2d9a:	88 ec       	ldi	r24, 0xC8	; 200
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	9a 8b       	std	Y+18, r25	; 0x12
    2da0:	89 8b       	std	Y+17, r24	; 0x11
    2da2:	89 89       	ldd	r24, Y+17	; 0x11
    2da4:	9a 89       	ldd	r25, Y+18	; 0x12
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	f1 f7       	brne	.-4      	; 0x2da6 <LCD_displayCharacter+0x2a4>
    2daa:	9a 8b       	std	Y+18, r25	; 0x12
    2dac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dae:	8b 89       	ldd	r24, Y+19	; 0x13
    2db0:	9c 89       	ldd	r25, Y+20	; 0x14
    2db2:	01 97       	sbiw	r24, 0x01	; 1
    2db4:	9c 8b       	std	Y+20, r25	; 0x14
    2db6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dba:	9c 89       	ldd	r25, Y+20	; 0x14
    2dbc:	00 97       	sbiw	r24, 0x00	; 0
    2dbe:	69 f7       	brne	.-38     	; 0x2d9a <LCD_displayCharacter+0x298>
    2dc0:	14 c0       	rjmp	.+40     	; 0x2dea <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc2:	6d 89       	ldd	r22, Y+21	; 0x15
    2dc4:	7e 89       	ldd	r23, Y+22	; 0x16
    2dc6:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	9c 8b       	std	Y+20, r25	; 0x14
    2dd4:	8b 8b       	std	Y+19, r24	; 0x13
    2dd6:	8b 89       	ldd	r24, Y+19	; 0x13
    2dd8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dda:	98 8b       	std	Y+16, r25	; 0x10
    2ddc:	8f 87       	std	Y+15, r24	; 0x0f
    2dde:	8f 85       	ldd	r24, Y+15	; 0x0f
    2de0:	98 89       	ldd	r25, Y+16	; 0x10
    2de2:	01 97       	sbiw	r24, 0x01	; 1
    2de4:	f1 f7       	brne	.-4      	; 0x2de2 <LCD_displayCharacter+0x2e0>
    2de6:	98 8b       	std	Y+16, r25	; 0x10
    2de8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2dea:	83 e0       	ldi	r24, 0x03	; 3
    2dec:	66 e0       	ldi	r22, 0x06	; 6
    2dee:	40 e0       	ldi	r20, 0x00	; 0
    2df0:	0e 94 1f 10 	call	0x203e	; 0x203e <GPIO_writePin>
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	a0 e8       	ldi	r26, 0x80	; 128
    2dfa:	bf e3       	ldi	r27, 0x3F	; 63
    2dfc:	8b 87       	std	Y+11, r24	; 0x0b
    2dfe:	9c 87       	std	Y+12, r25	; 0x0c
    2e00:	ad 87       	std	Y+13, r26	; 0x0d
    2e02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	4a ef       	ldi	r20, 0xFA	; 250
    2e12:	54 e4       	ldi	r21, 0x44	; 68
    2e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	8f 83       	std	Y+7, r24	; 0x07
    2e1e:	98 87       	std	Y+8, r25	; 0x08
    2e20:	a9 87       	std	Y+9, r26	; 0x09
    2e22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e24:	6f 81       	ldd	r22, Y+7	; 0x07
    2e26:	78 85       	ldd	r23, Y+8	; 0x08
    2e28:	89 85       	ldd	r24, Y+9	; 0x09
    2e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e8       	ldi	r20, 0x80	; 128
    2e32:	5f e3       	ldi	r21, 0x3F	; 63
    2e34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e38:	88 23       	and	r24, r24
    2e3a:	2c f4       	brge	.+10     	; 0x2e46 <LCD_displayCharacter+0x344>
		__ticks = 1;
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	9e 83       	std	Y+6, r25	; 0x06
    2e42:	8d 83       	std	Y+5, r24	; 0x05
    2e44:	3f c0       	rjmp	.+126    	; 0x2ec4 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2e46:	6f 81       	ldd	r22, Y+7	; 0x07
    2e48:	78 85       	ldd	r23, Y+8	; 0x08
    2e4a:	89 85       	ldd	r24, Y+9	; 0x09
    2e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	3f ef       	ldi	r19, 0xFF	; 255
    2e52:	4f e7       	ldi	r20, 0x7F	; 127
    2e54:	57 e4       	ldi	r21, 0x47	; 71
    2e56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e5a:	18 16       	cp	r1, r24
    2e5c:	4c f5       	brge	.+82     	; 0x2eb0 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e60:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	40 e2       	ldi	r20, 0x20	; 32
    2e6c:	51 e4       	ldi	r21, 0x41	; 65
    2e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	bc 01       	movw	r22, r24
    2e78:	cd 01       	movw	r24, r26
    2e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	9e 83       	std	Y+6, r25	; 0x06
    2e84:	8d 83       	std	Y+5, r24	; 0x05
    2e86:	0f c0       	rjmp	.+30     	; 0x2ea6 <LCD_displayCharacter+0x3a4>
    2e88:	88 ec       	ldi	r24, 0xC8	; 200
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	9c 83       	std	Y+4, r25	; 0x04
    2e8e:	8b 83       	std	Y+3, r24	; 0x03
    2e90:	8b 81       	ldd	r24, Y+3	; 0x03
    2e92:	9c 81       	ldd	r25, Y+4	; 0x04
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	f1 f7       	brne	.-4      	; 0x2e94 <LCD_displayCharacter+0x392>
    2e98:	9c 83       	std	Y+4, r25	; 0x04
    2e9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea0:	01 97       	sbiw	r24, 0x01	; 1
    2ea2:	9e 83       	std	Y+6, r25	; 0x06
    2ea4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	69 f7       	brne	.-38     	; 0x2e88 <LCD_displayCharacter+0x386>
    2eae:	14 c0       	rjmp	.+40     	; 0x2ed8 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb2:	78 85       	ldd	r23, Y+8	; 0x08
    2eb4:	89 85       	ldd	r24, Y+9	; 0x09
    2eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	9e 83       	std	Y+6, r25	; 0x06
    2ec2:	8d 83       	std	Y+5, r24	; 0x05
    2ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec8:	9a 83       	std	Y+2, r25	; 0x02
    2eca:	89 83       	std	Y+1, r24	; 0x01
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	f1 f7       	brne	.-4      	; 0x2ed0 <LCD_displayCharacter+0x3ce>
    2ed4:	9a 83       	std	Y+2, r25	; 0x02
    2ed6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2ed8:	e9 96       	adiw	r28, 0x39	; 57
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	f8 94       	cli
    2ede:	de bf       	out	0x3e, r29	; 62
    2ee0:	0f be       	out	0x3f, r0	; 63
    2ee2:	cd bf       	out	0x3d, r28	; 61
    2ee4:	cf 91       	pop	r28
    2ee6:	df 91       	pop	r29
    2ee8:	08 95       	ret

00002eea <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2eea:	df 93       	push	r29
    2eec:	cf 93       	push	r28
    2eee:	00 d0       	rcall	.+0      	; 0x2ef0 <LCD_displayString+0x6>
    2ef0:	0f 92       	push	r0
    2ef2:	cd b7       	in	r28, 0x3d	; 61
    2ef4:	de b7       	in	r29, 0x3e	; 62
    2ef6:	9b 83       	std	Y+3, r25	; 0x03
    2ef8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2efa:	19 82       	std	Y+1, r1	; 0x01
    2efc:	0e c0       	rjmp	.+28     	; 0x2f1a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2efe:	89 81       	ldd	r24, Y+1	; 0x01
    2f00:	28 2f       	mov	r18, r24
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	8a 81       	ldd	r24, Y+2	; 0x02
    2f06:	9b 81       	ldd	r25, Y+3	; 0x03
    2f08:	fc 01       	movw	r30, r24
    2f0a:	e2 0f       	add	r30, r18
    2f0c:	f3 1f       	adc	r31, r19
    2f0e:	80 81       	ld	r24, Z
    2f10:	0e 94 81 15 	call	0x2b02	; 0x2b02 <LCD_displayCharacter>
		i++;
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	8f 5f       	subi	r24, 0xFF	; 255
    2f18:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2f1a:	89 81       	ldd	r24, Y+1	; 0x01
    2f1c:	28 2f       	mov	r18, r24
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	8a 81       	ldd	r24, Y+2	; 0x02
    2f22:	9b 81       	ldd	r25, Y+3	; 0x03
    2f24:	fc 01       	movw	r30, r24
    2f26:	e2 0f       	add	r30, r18
    2f28:	f3 1f       	adc	r31, r19
    2f2a:	80 81       	ld	r24, Z
    2f2c:	88 23       	and	r24, r24
    2f2e:	39 f7       	brne	.-50     	; 0x2efe <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	cf 91       	pop	r28
    2f38:	df 91       	pop	r29
    2f3a:	08 95       	ret

00002f3c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2f3c:	df 93       	push	r29
    2f3e:	cf 93       	push	r28
    2f40:	00 d0       	rcall	.+0      	; 0x2f42 <LCD_moveCursor+0x6>
    2f42:	00 d0       	rcall	.+0      	; 0x2f44 <LCD_moveCursor+0x8>
    2f44:	0f 92       	push	r0
    2f46:	cd b7       	in	r28, 0x3d	; 61
    2f48:	de b7       	in	r29, 0x3e	; 62
    2f4a:	8a 83       	std	Y+2, r24	; 0x02
    2f4c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f50:	28 2f       	mov	r18, r24
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	3d 83       	std	Y+5, r19	; 0x05
    2f56:	2c 83       	std	Y+4, r18	; 0x04
    2f58:	8c 81       	ldd	r24, Y+4	; 0x04
    2f5a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f5c:	81 30       	cpi	r24, 0x01	; 1
    2f5e:	91 05       	cpc	r25, r1
    2f60:	c1 f0       	breq	.+48     	; 0x2f92 <LCD_moveCursor+0x56>
    2f62:	2c 81       	ldd	r18, Y+4	; 0x04
    2f64:	3d 81       	ldd	r19, Y+5	; 0x05
    2f66:	22 30       	cpi	r18, 0x02	; 2
    2f68:	31 05       	cpc	r19, r1
    2f6a:	2c f4       	brge	.+10     	; 0x2f76 <LCD_moveCursor+0x3a>
    2f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f6e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f70:	00 97       	sbiw	r24, 0x00	; 0
    2f72:	61 f0       	breq	.+24     	; 0x2f8c <LCD_moveCursor+0x50>
    2f74:	19 c0       	rjmp	.+50     	; 0x2fa8 <LCD_moveCursor+0x6c>
    2f76:	2c 81       	ldd	r18, Y+4	; 0x04
    2f78:	3d 81       	ldd	r19, Y+5	; 0x05
    2f7a:	22 30       	cpi	r18, 0x02	; 2
    2f7c:	31 05       	cpc	r19, r1
    2f7e:	69 f0       	breq	.+26     	; 0x2f9a <LCD_moveCursor+0x5e>
    2f80:	8c 81       	ldd	r24, Y+4	; 0x04
    2f82:	9d 81       	ldd	r25, Y+5	; 0x05
    2f84:	83 30       	cpi	r24, 0x03	; 3
    2f86:	91 05       	cpc	r25, r1
    2f88:	61 f0       	breq	.+24     	; 0x2fa2 <LCD_moveCursor+0x66>
    2f8a:	0e c0       	rjmp	.+28     	; 0x2fa8 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    2f90:	0b c0       	rjmp	.+22     	; 0x2fa8 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2f92:	8b 81       	ldd	r24, Y+3	; 0x03
    2f94:	80 5c       	subi	r24, 0xC0	; 192
    2f96:	89 83       	std	Y+1, r24	; 0x01
    2f98:	07 c0       	rjmp	.+14     	; 0x2fa8 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	80 5f       	subi	r24, 0xF0	; 240
    2f9e:	89 83       	std	Y+1, r24	; 0x01
    2fa0:	03 c0       	rjmp	.+6      	; 0x2fa8 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa4:	80 5b       	subi	r24, 0xB0	; 176
    2fa6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	80 68       	ori	r24, 0x80	; 128
    2fac:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_sendCommand>
}
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	0f 90       	pop	r0
    2fb8:	0f 90       	pop	r0
    2fba:	cf 91       	pop	r28
    2fbc:	df 91       	pop	r29
    2fbe:	08 95       	ret

00002fc0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2fc0:	df 93       	push	r29
    2fc2:	cf 93       	push	r28
    2fc4:	00 d0       	rcall	.+0      	; 0x2fc6 <LCD_displayStringRowColumn+0x6>
    2fc6:	00 d0       	rcall	.+0      	; 0x2fc8 <LCD_displayStringRowColumn+0x8>
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
    2fcc:	89 83       	std	Y+1, r24	; 0x01
    2fce:	6a 83       	std	Y+2, r22	; 0x02
    2fd0:	5c 83       	std	Y+4, r21	; 0x04
    2fd2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	6a 81       	ldd	r22, Y+2	; 0x02
    2fd8:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fde:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe0:	0e 94 75 17 	call	0x2eea	; 0x2eea <LCD_displayString>
}
    2fe4:	0f 90       	pop	r0
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
    2fec:	cf 91       	pop	r28
    2fee:	df 91       	pop	r29
    2ff0:	08 95       	ret

00002ff2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2ff2:	df 93       	push	r29
    2ff4:	cf 93       	push	r28
    2ff6:	cd b7       	in	r28, 0x3d	; 61
    2ff8:	de b7       	in	r29, 0x3e	; 62
    2ffa:	62 97       	sbiw	r28, 0x12	; 18
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	f8 94       	cli
    3000:	de bf       	out	0x3e, r29	; 62
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	cd bf       	out	0x3d, r28	; 61
    3006:	9a 8b       	std	Y+18, r25	; 0x12
    3008:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    300a:	89 89       	ldd	r24, Y+17	; 0x11
    300c:	9a 89       	ldd	r25, Y+18	; 0x12
    300e:	9e 01       	movw	r18, r28
    3010:	2f 5f       	subi	r18, 0xFF	; 255
    3012:	3f 4f       	sbci	r19, 0xFF	; 255
    3014:	b9 01       	movw	r22, r18
    3016:	4a e0       	ldi	r20, 0x0A	; 10
    3018:	50 e0       	ldi	r21, 0x00	; 0
    301a:	0e 94 d6 19 	call	0x33ac	; 0x33ac <itoa>
   LCD_displayString(buff); /* Display the string */
    301e:	ce 01       	movw	r24, r28
    3020:	01 96       	adiw	r24, 0x01	; 1
    3022:	0e 94 75 17 	call	0x2eea	; 0x2eea <LCD_displayString>
}
    3026:	62 96       	adiw	r28, 0x12	; 18
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	cf 91       	pop	r28
    3034:	df 91       	pop	r29
    3036:	08 95       	ret

00003038 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3038:	df 93       	push	r29
    303a:	cf 93       	push	r28
    303c:	cd b7       	in	r28, 0x3d	; 61
    303e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_sendCommand>
}
    3046:	cf 91       	pop	r28
    3048:	df 91       	pop	r29
    304a:	08 95       	ret

0000304c <UART_init>:
 * 2. Enable the UART.
 * 3. Setup UART Operating Mode
 * 4. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType* UART_Config)
{
    304c:	df 93       	push	r29
    304e:	cf 93       	push	r28
    3050:	00 d0       	rcall	.+0      	; 0x3052 <UART_init+0x6>
    3052:	00 d0       	rcall	.+0      	; 0x3054 <UART_init+0x8>
    3054:	cd b7       	in	r28, 0x3d	; 61
    3056:	de b7       	in	r29, 0x3e	; 62
    3058:	9c 83       	std	Y+4, r25	; 0x04
    305a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    305c:	1a 82       	std	Y+2, r1	; 0x02
    305e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * U2X = 0 for Normal transmission speed
	 * U2X = 1 for double transmission speed
	*/
	UCSRA = (UCSRA & 0xFD) |((UART_Config-> Operating_mode) << U2X);
    3060:	ab e2       	ldi	r26, 0x2B	; 43
    3062:	b0 e0       	ldi	r27, 0x00	; 0
    3064:	eb e2       	ldi	r30, 0x2B	; 43
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	80 81       	ld	r24, Z
    306a:	28 2f       	mov	r18, r24
    306c:	2d 7f       	andi	r18, 0xFD	; 253
    306e:	eb 81       	ldd	r30, Y+3	; 0x03
    3070:	fc 81       	ldd	r31, Y+4	; 0x04
    3072:	83 81       	ldd	r24, Z+3	; 0x03
    3074:	88 2f       	mov	r24, r24
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	88 0f       	add	r24, r24
    307a:	99 1f       	adc	r25, r25
    307c:	82 2b       	or	r24, r18
    307e:	8c 93       	st	X, r24
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 5 or 6 or 7 or 8-bit data mode
	 * UCSZ2 = 1 For 9-bit data mode
	 * RXB8 & TXB8 used for 9-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN) | (UCSRB & 0xFB) | ( ((UART_Config->data) & 0x04));
    3080:	aa e2       	ldi	r26, 0x2A	; 42
    3082:	b0 e0       	ldi	r27, 0x00	; 0
    3084:	ea e2       	ldi	r30, 0x2A	; 42
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	80 81       	ld	r24, Z
    308a:	83 7e       	andi	r24, 0xE3	; 227
    308c:	98 2f       	mov	r25, r24
    308e:	98 61       	ori	r25, 0x18	; 24
    3090:	eb 81       	ldd	r30, Y+3	; 0x03
    3092:	fc 81       	ldd	r31, Y+4	; 0x04
    3094:	80 81       	ld	r24, Z
    3096:	84 70       	andi	r24, 0x04	; 4
    3098:	89 2b       	or	r24, r25
    309a:	8c 93       	st	X, r24
	 * UPM1:0  = parity Mode Select bits
	 * USBS    = no. of stop bits
	 * UCSZ1:0 = 5 or 6 or 7 or 8 or 9-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) |( ((UART_Config->Parity_bit) & 0x03) << 4) | ( (UART_Config->stop_bit) << USBS)
    309c:	a0 e4       	ldi	r26, 0x40	; 64
    309e:	b0 e0       	ldi	r27, 0x00	; 0
    30a0:	eb 81       	ldd	r30, Y+3	; 0x03
    30a2:	fc 81       	ldd	r31, Y+4	; 0x04
    30a4:	81 81       	ldd	r24, Z+1	; 0x01
    30a6:	88 2f       	mov	r24, r24
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	83 70       	andi	r24, 0x03	; 3
    30ac:	90 70       	andi	r25, 0x00	; 0
    30ae:	82 95       	swap	r24
    30b0:	92 95       	swap	r25
    30b2:	90 7f       	andi	r25, 0xF0	; 240
    30b4:	98 27       	eor	r25, r24
    30b6:	80 7f       	andi	r24, 0xF0	; 240
    30b8:	98 27       	eor	r25, r24
    30ba:	28 2f       	mov	r18, r24
    30bc:	20 68       	ori	r18, 0x80	; 128
    30be:	eb 81       	ldd	r30, Y+3	; 0x03
    30c0:	fc 81       	ldd	r31, Y+4	; 0x04
    30c2:	82 81       	ldd	r24, Z+2	; 0x02
    30c4:	88 2f       	mov	r24, r24
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	88 0f       	add	r24, r24
    30ca:	99 1f       	adc	r25, r25
    30cc:	88 0f       	add	r24, r24
    30ce:	99 1f       	adc	r25, r25
    30d0:	88 0f       	add	r24, r24
    30d2:	99 1f       	adc	r25, r25
    30d4:	28 2b       	or	r18, r24
    30d6:	eb 81       	ldd	r30, Y+3	; 0x03
    30d8:	fc 81       	ldd	r31, Y+4	; 0x04
    30da:	80 81       	ld	r24, Z
    30dc:	88 2f       	mov	r24, r24
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	83 70       	andi	r24, 0x03	; 3
    30e2:	90 70       	andi	r25, 0x00	; 0
    30e4:	88 0f       	add	r24, r24
    30e6:	99 1f       	adc	r25, r25
    30e8:	82 2b       	or	r24, r18
    30ea:	8c 93       	st	X, r24
			|( ((UART_Config->data) & 0x03) <<1);
	

	/* Calculate the UBRR register value based on UART Operating mode*/
	if(UART_Config->Operating_mode == Double_Speed_mode)
    30ec:	eb 81       	ldd	r30, Y+3	; 0x03
    30ee:	fc 81       	ldd	r31, Y+4	; 0x04
    30f0:	83 81       	ldd	r24, Z+3	; 0x03
    30f2:	81 30       	cpi	r24, 0x01	; 1
    30f4:	11 f5       	brne	.+68     	; 0x313a <UART_init+0xee>
		ubrr_value = (uint16)(((F_CPU / ((UART_Config->baud_rate) * 8UL))) - 1);
    30f6:	eb 81       	ldd	r30, Y+3	; 0x03
    30f8:	fc 81       	ldd	r31, Y+4	; 0x04
    30fa:	84 81       	ldd	r24, Z+4	; 0x04
    30fc:	95 81       	ldd	r25, Z+5	; 0x05
    30fe:	a6 81       	ldd	r26, Z+6	; 0x06
    3100:	b7 81       	ldd	r27, Z+7	; 0x07
    3102:	88 0f       	add	r24, r24
    3104:	99 1f       	adc	r25, r25
    3106:	aa 1f       	adc	r26, r26
    3108:	bb 1f       	adc	r27, r27
    310a:	88 0f       	add	r24, r24
    310c:	99 1f       	adc	r25, r25
    310e:	aa 1f       	adc	r26, r26
    3110:	bb 1f       	adc	r27, r27
    3112:	88 0f       	add	r24, r24
    3114:	99 1f       	adc	r25, r25
    3116:	aa 1f       	adc	r26, r26
    3118:	bb 1f       	adc	r27, r27
    311a:	9c 01       	movw	r18, r24
    311c:	ad 01       	movw	r20, r26
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	92 e1       	ldi	r25, 0x12	; 18
    3122:	aa e7       	ldi	r26, 0x7A	; 122
    3124:	b0 e0       	ldi	r27, 0x00	; 0
    3126:	bc 01       	movw	r22, r24
    3128:	cd 01       	movw	r24, r26
    312a:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__udivmodsi4>
    312e:	da 01       	movw	r26, r20
    3130:	c9 01       	movw	r24, r18
    3132:	01 97       	sbiw	r24, 0x01	; 1
    3134:	9a 83       	std	Y+2, r25	; 0x02
    3136:	89 83       	std	Y+1, r24	; 0x01
    3138:	25 c0       	rjmp	.+74     	; 0x3184 <UART_init+0x138>

	else
		ubrr_value = (uint16)(((F_CPU / ((UART_Config->baud_rate) * 16UL))) - 1);
    313a:	eb 81       	ldd	r30, Y+3	; 0x03
    313c:	fc 81       	ldd	r31, Y+4	; 0x04
    313e:	84 81       	ldd	r24, Z+4	; 0x04
    3140:	95 81       	ldd	r25, Z+5	; 0x05
    3142:	a6 81       	ldd	r26, Z+6	; 0x06
    3144:	b7 81       	ldd	r27, Z+7	; 0x07
    3146:	88 0f       	add	r24, r24
    3148:	99 1f       	adc	r25, r25
    314a:	aa 1f       	adc	r26, r26
    314c:	bb 1f       	adc	r27, r27
    314e:	88 0f       	add	r24, r24
    3150:	99 1f       	adc	r25, r25
    3152:	aa 1f       	adc	r26, r26
    3154:	bb 1f       	adc	r27, r27
    3156:	88 0f       	add	r24, r24
    3158:	99 1f       	adc	r25, r25
    315a:	aa 1f       	adc	r26, r26
    315c:	bb 1f       	adc	r27, r27
    315e:	88 0f       	add	r24, r24
    3160:	99 1f       	adc	r25, r25
    3162:	aa 1f       	adc	r26, r26
    3164:	bb 1f       	adc	r27, r27
    3166:	9c 01       	movw	r18, r24
    3168:	ad 01       	movw	r20, r26
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	92 e1       	ldi	r25, 0x12	; 18
    316e:	aa e7       	ldi	r26, 0x7A	; 122
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	bc 01       	movw	r22, r24
    3174:	cd 01       	movw	r24, r26
    3176:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__udivmodsi4>
    317a:	da 01       	movw	r26, r20
    317c:	c9 01       	movw	r24, r18
    317e:	01 97       	sbiw	r24, 0x01	; 1
    3180:	9a 83       	std	Y+2, r25	; 0x02
    3182:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3184:	e0 e4       	ldi	r30, 0x40	; 64
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	89 81       	ldd	r24, Y+1	; 0x01
    318a:	9a 81       	ldd	r25, Y+2	; 0x02
    318c:	89 2f       	mov	r24, r25
    318e:	99 27       	eor	r25, r25
    3190:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3192:	e9 e2       	ldi	r30, 0x29	; 41
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	80 83       	st	Z, r24
}
    319a:	0f 90       	pop	r0
    319c:	0f 90       	pop	r0
    319e:	0f 90       	pop	r0
    31a0:	0f 90       	pop	r0
    31a2:	cf 91       	pop	r28
    31a4:	df 91       	pop	r29
    31a6:	08 95       	ret

000031a8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint16 data)
{
    31a8:	df 93       	push	r29
    31aa:	cf 93       	push	r28
    31ac:	00 d0       	rcall	.+0      	; 0x31ae <UART_sendByte+0x6>
    31ae:	cd b7       	in	r28, 0x3d	; 61
    31b0:	de b7       	in	r29, 0x3e	; 62
    31b2:	9a 83       	std	Y+2, r25	; 0x02
    31b4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    31b6:	eb e2       	ldi	r30, 0x2B	; 43
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	88 2f       	mov	r24, r24
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	80 72       	andi	r24, 0x20	; 32
    31c2:	90 70       	andi	r25, 0x00	; 0
    31c4:	00 97       	sbiw	r24, 0x00	; 0
    31c6:	b9 f3       	breq	.-18     	; 0x31b6 <UART_sendByte+0xe>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	if((data >> 8) == 0) /* No of data bits = 8 or less*/
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	9a 81       	ldd	r25, Y+2	; 0x02
    31cc:	89 2f       	mov	r24, r25
    31ce:	99 27       	eor	r25, r25
    31d0:	00 97       	sbiw	r24, 0x00	; 0
    31d2:	29 f4       	brne	.+10     	; 0x31de <UART_sendByte+0x36>
		UDR = data;
    31d4:	ec e2       	ldi	r30, 0x2C	; 44
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
    31da:	80 83       	st	Z, r24
    31dc:	0c c0       	rjmp	.+24     	; 0x31f6 <UART_sendByte+0x4e>

	else    /* number of data bits = 9*/
	{
		UCSRB = ((data &0x001) << TXB8); /*Assign LSB to TXB8 (ninth bit) */
    31de:	ea e2       	ldi	r30, 0x2A	; 42
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	81 70       	andi	r24, 0x01	; 1
    31e6:	80 83       	st	Z, r24
		UDR = (data >> 1); /* Put The MS 8-bits in UDR Register */
    31e8:	ec e2       	ldi	r30, 0x2C	; 44
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	9a 81       	ldd	r25, Y+2	; 0x02
    31f0:	96 95       	lsr	r25
    31f2:	87 95       	ror	r24
    31f4:	80 83       	st	Z, r24
	}
}
    31f6:	0f 90       	pop	r0
    31f8:	0f 90       	pop	r0
    31fa:	cf 91       	pop	r28
    31fc:	df 91       	pop	r29
    31fe:	08 95       	ret

00003200 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3200:	df 93       	push	r29
    3202:	cf 93       	push	r28
    3204:	cd b7       	in	r28, 0x3d	; 61
    3206:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3208:	eb e2       	ldi	r30, 0x2B	; 43
    320a:	f0 e0       	ldi	r31, 0x00	; 0
    320c:	80 81       	ld	r24, Z
    320e:	88 23       	and	r24, r24
    3210:	dc f7       	brge	.-10     	; 0x3208 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3212:	ec e2       	ldi	r30, 0x2C	; 44
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	80 81       	ld	r24, Z
}
    3218:	cf 91       	pop	r28
    321a:	df 91       	pop	r29
    321c:	08 95       	ret

0000321e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    321e:	df 93       	push	r29
    3220:	cf 93       	push	r28
    3222:	00 d0       	rcall	.+0      	; 0x3224 <UART_sendString+0x6>
    3224:	0f 92       	push	r0
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
    322a:	9b 83       	std	Y+3, r25	; 0x03
    322c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    322e:	19 82       	std	Y+1, r1	; 0x01
    3230:	10 c0       	rjmp	.+32     	; 0x3252 <UART_sendString+0x34>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3232:	89 81       	ldd	r24, Y+1	; 0x01
    3234:	28 2f       	mov	r18, r24
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	8a 81       	ldd	r24, Y+2	; 0x02
    323a:	9b 81       	ldd	r25, Y+3	; 0x03
    323c:	fc 01       	movw	r30, r24
    323e:	e2 0f       	add	r30, r18
    3240:	f3 1f       	adc	r31, r19
    3242:	80 81       	ld	r24, Z
    3244:	88 2f       	mov	r24, r24
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <UART_sendByte>
		i++;
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	8f 5f       	subi	r24, 0xFF	; 255
    3250:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3252:	89 81       	ldd	r24, Y+1	; 0x01
    3254:	28 2f       	mov	r18, r24
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	8a 81       	ldd	r24, Y+2	; 0x02
    325a:	9b 81       	ldd	r25, Y+3	; 0x03
    325c:	fc 01       	movw	r30, r24
    325e:	e2 0f       	add	r30, r18
    3260:	f3 1f       	adc	r31, r19
    3262:	80 81       	ld	r24, Z
    3264:	88 23       	and	r24, r24
    3266:	29 f7       	brne	.-54     	; 0x3232 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3268:	0f 90       	pop	r0
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	cf 91       	pop	r28
    3270:	df 91       	pop	r29
    3272:	08 95       	ret

00003274 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3274:	0f 93       	push	r16
    3276:	1f 93       	push	r17
    3278:	df 93       	push	r29
    327a:	cf 93       	push	r28
    327c:	00 d0       	rcall	.+0      	; 0x327e <UART_receiveString+0xa>
    327e:	0f 92       	push	r0
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62
    3284:	9b 83       	std	Y+3, r25	; 0x03
    3286:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3288:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    328a:	89 81       	ldd	r24, Y+1	; 0x01
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	8a 81       	ldd	r24, Y+2	; 0x02
    3292:	9b 81       	ldd	r25, Y+3	; 0x03
    3294:	8c 01       	movw	r16, r24
    3296:	02 0f       	add	r16, r18
    3298:	13 1f       	adc	r17, r19
    329a:	0e 94 00 19 	call	0x3200	; 0x3200 <UART_recieveByte>
    329e:	f8 01       	movw	r30, r16
    32a0:	80 83       	st	Z, r24
    32a2:	0f c0       	rjmp	.+30     	; 0x32c2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	8f 5f       	subi	r24, 0xFF	; 255
    32a8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	28 2f       	mov	r18, r24
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	8a 81       	ldd	r24, Y+2	; 0x02
    32b2:	9b 81       	ldd	r25, Y+3	; 0x03
    32b4:	8c 01       	movw	r16, r24
    32b6:	02 0f       	add	r16, r18
    32b8:	13 1f       	adc	r17, r19
    32ba:	0e 94 00 19 	call	0x3200	; 0x3200 <UART_recieveByte>
    32be:	f8 01       	movw	r30, r16
    32c0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	28 2f       	mov	r18, r24
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ca:	9b 81       	ldd	r25, Y+3	; 0x03
    32cc:	fc 01       	movw	r30, r24
    32ce:	e2 0f       	add	r30, r18
    32d0:	f3 1f       	adc	r31, r19
    32d2:	80 81       	ld	r24, Z
    32d4:	83 32       	cpi	r24, 0x23	; 35
    32d6:	31 f7       	brne	.-52     	; 0x32a4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
    32da:	28 2f       	mov	r18, r24
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	9b 81       	ldd	r25, Y+3	; 0x03
    32e2:	fc 01       	movw	r30, r24
    32e4:	e2 0f       	add	r30, r18
    32e6:	f3 1f       	adc	r31, r19
    32e8:	10 82       	st	Z, r1
}
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	0f 90       	pop	r0
    32f0:	cf 91       	pop	r28
    32f2:	df 91       	pop	r29
    32f4:	1f 91       	pop	r17
    32f6:	0f 91       	pop	r16
    32f8:	08 95       	ret

000032fa <__udivmodsi4>:
    32fa:	a1 e2       	ldi	r26, 0x21	; 33
    32fc:	1a 2e       	mov	r1, r26
    32fe:	aa 1b       	sub	r26, r26
    3300:	bb 1b       	sub	r27, r27
    3302:	fd 01       	movw	r30, r26
    3304:	0d c0       	rjmp	.+26     	; 0x3320 <__udivmodsi4_ep>

00003306 <__udivmodsi4_loop>:
    3306:	aa 1f       	adc	r26, r26
    3308:	bb 1f       	adc	r27, r27
    330a:	ee 1f       	adc	r30, r30
    330c:	ff 1f       	adc	r31, r31
    330e:	a2 17       	cp	r26, r18
    3310:	b3 07       	cpc	r27, r19
    3312:	e4 07       	cpc	r30, r20
    3314:	f5 07       	cpc	r31, r21
    3316:	20 f0       	brcs	.+8      	; 0x3320 <__udivmodsi4_ep>
    3318:	a2 1b       	sub	r26, r18
    331a:	b3 0b       	sbc	r27, r19
    331c:	e4 0b       	sbc	r30, r20
    331e:	f5 0b       	sbc	r31, r21

00003320 <__udivmodsi4_ep>:
    3320:	66 1f       	adc	r22, r22
    3322:	77 1f       	adc	r23, r23
    3324:	88 1f       	adc	r24, r24
    3326:	99 1f       	adc	r25, r25
    3328:	1a 94       	dec	r1
    332a:	69 f7       	brne	.-38     	; 0x3306 <__udivmodsi4_loop>
    332c:	60 95       	com	r22
    332e:	70 95       	com	r23
    3330:	80 95       	com	r24
    3332:	90 95       	com	r25
    3334:	9b 01       	movw	r18, r22
    3336:	ac 01       	movw	r20, r24
    3338:	bd 01       	movw	r22, r26
    333a:	cf 01       	movw	r24, r30
    333c:	08 95       	ret

0000333e <__prologue_saves__>:
    333e:	2f 92       	push	r2
    3340:	3f 92       	push	r3
    3342:	4f 92       	push	r4
    3344:	5f 92       	push	r5
    3346:	6f 92       	push	r6
    3348:	7f 92       	push	r7
    334a:	8f 92       	push	r8
    334c:	9f 92       	push	r9
    334e:	af 92       	push	r10
    3350:	bf 92       	push	r11
    3352:	cf 92       	push	r12
    3354:	df 92       	push	r13
    3356:	ef 92       	push	r14
    3358:	ff 92       	push	r15
    335a:	0f 93       	push	r16
    335c:	1f 93       	push	r17
    335e:	cf 93       	push	r28
    3360:	df 93       	push	r29
    3362:	cd b7       	in	r28, 0x3d	; 61
    3364:	de b7       	in	r29, 0x3e	; 62
    3366:	ca 1b       	sub	r28, r26
    3368:	db 0b       	sbc	r29, r27
    336a:	0f b6       	in	r0, 0x3f	; 63
    336c:	f8 94       	cli
    336e:	de bf       	out	0x3e, r29	; 62
    3370:	0f be       	out	0x3f, r0	; 63
    3372:	cd bf       	out	0x3d, r28	; 61
    3374:	09 94       	ijmp

00003376 <__epilogue_restores__>:
    3376:	2a 88       	ldd	r2, Y+18	; 0x12
    3378:	39 88       	ldd	r3, Y+17	; 0x11
    337a:	48 88       	ldd	r4, Y+16	; 0x10
    337c:	5f 84       	ldd	r5, Y+15	; 0x0f
    337e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3380:	7d 84       	ldd	r7, Y+13	; 0x0d
    3382:	8c 84       	ldd	r8, Y+12	; 0x0c
    3384:	9b 84       	ldd	r9, Y+11	; 0x0b
    3386:	aa 84       	ldd	r10, Y+10	; 0x0a
    3388:	b9 84       	ldd	r11, Y+9	; 0x09
    338a:	c8 84       	ldd	r12, Y+8	; 0x08
    338c:	df 80       	ldd	r13, Y+7	; 0x07
    338e:	ee 80       	ldd	r14, Y+6	; 0x06
    3390:	fd 80       	ldd	r15, Y+5	; 0x05
    3392:	0c 81       	ldd	r16, Y+4	; 0x04
    3394:	1b 81       	ldd	r17, Y+3	; 0x03
    3396:	aa 81       	ldd	r26, Y+2	; 0x02
    3398:	b9 81       	ldd	r27, Y+1	; 0x01
    339a:	ce 0f       	add	r28, r30
    339c:	d1 1d       	adc	r29, r1
    339e:	0f b6       	in	r0, 0x3f	; 63
    33a0:	f8 94       	cli
    33a2:	de bf       	out	0x3e, r29	; 62
    33a4:	0f be       	out	0x3f, r0	; 63
    33a6:	cd bf       	out	0x3d, r28	; 61
    33a8:	ed 01       	movw	r28, r26
    33aa:	08 95       	ret

000033ac <itoa>:
    33ac:	fb 01       	movw	r30, r22
    33ae:	9f 01       	movw	r18, r30
    33b0:	e8 94       	clt
    33b2:	42 30       	cpi	r20, 0x02	; 2
    33b4:	c4 f0       	brlt	.+48     	; 0x33e6 <itoa+0x3a>
    33b6:	45 32       	cpi	r20, 0x25	; 37
    33b8:	b4 f4       	brge	.+44     	; 0x33e6 <itoa+0x3a>
    33ba:	4a 30       	cpi	r20, 0x0A	; 10
    33bc:	29 f4       	brne	.+10     	; 0x33c8 <itoa+0x1c>
    33be:	97 fb       	bst	r25, 7
    33c0:	1e f4       	brtc	.+6      	; 0x33c8 <itoa+0x1c>
    33c2:	90 95       	com	r25
    33c4:	81 95       	neg	r24
    33c6:	9f 4f       	sbci	r25, 0xFF	; 255
    33c8:	64 2f       	mov	r22, r20
    33ca:	77 27       	eor	r23, r23
    33cc:	0e 94 07 1a 	call	0x340e	; 0x340e <__udivmodhi4>
    33d0:	80 5d       	subi	r24, 0xD0	; 208
    33d2:	8a 33       	cpi	r24, 0x3A	; 58
    33d4:	0c f0       	brlt	.+2      	; 0x33d8 <itoa+0x2c>
    33d6:	89 5d       	subi	r24, 0xD9	; 217
    33d8:	81 93       	st	Z+, r24
    33da:	cb 01       	movw	r24, r22
    33dc:	00 97       	sbiw	r24, 0x00	; 0
    33de:	a1 f7       	brne	.-24     	; 0x33c8 <itoa+0x1c>
    33e0:	16 f4       	brtc	.+4      	; 0x33e6 <itoa+0x3a>
    33e2:	5d e2       	ldi	r21, 0x2D	; 45
    33e4:	51 93       	st	Z+, r21
    33e6:	10 82       	st	Z, r1
    33e8:	c9 01       	movw	r24, r18
    33ea:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <strrev>

000033ee <strrev>:
    33ee:	dc 01       	movw	r26, r24
    33f0:	fc 01       	movw	r30, r24
    33f2:	67 2f       	mov	r22, r23
    33f4:	71 91       	ld	r23, Z+
    33f6:	77 23       	and	r23, r23
    33f8:	e1 f7       	brne	.-8      	; 0x33f2 <strrev+0x4>
    33fa:	32 97       	sbiw	r30, 0x02	; 2
    33fc:	04 c0       	rjmp	.+8      	; 0x3406 <strrev+0x18>
    33fe:	7c 91       	ld	r23, X
    3400:	6d 93       	st	X+, r22
    3402:	70 83       	st	Z, r23
    3404:	62 91       	ld	r22, -Z
    3406:	ae 17       	cp	r26, r30
    3408:	bf 07       	cpc	r27, r31
    340a:	c8 f3       	brcs	.-14     	; 0x33fe <strrev+0x10>
    340c:	08 95       	ret

0000340e <__udivmodhi4>:
    340e:	aa 1b       	sub	r26, r26
    3410:	bb 1b       	sub	r27, r27
    3412:	51 e1       	ldi	r21, 0x11	; 17
    3414:	07 c0       	rjmp	.+14     	; 0x3424 <__udivmodhi4_ep>

00003416 <__udivmodhi4_loop>:
    3416:	aa 1f       	adc	r26, r26
    3418:	bb 1f       	adc	r27, r27
    341a:	a6 17       	cp	r26, r22
    341c:	b7 07       	cpc	r27, r23
    341e:	10 f0       	brcs	.+4      	; 0x3424 <__udivmodhi4_ep>
    3420:	a6 1b       	sub	r26, r22
    3422:	b7 0b       	sbc	r27, r23

00003424 <__udivmodhi4_ep>:
    3424:	88 1f       	adc	r24, r24
    3426:	99 1f       	adc	r25, r25
    3428:	5a 95       	dec	r21
    342a:	a9 f7       	brne	.-22     	; 0x3416 <__udivmodhi4_loop>
    342c:	80 95       	com	r24
    342e:	90 95       	com	r25
    3430:	bc 01       	movw	r22, r24
    3432:	cd 01       	movw	r24, r26
    3434:	08 95       	ret

00003436 <_exit>:
    3436:	f8 94       	cli

00003438 <__stop_program>:
    3438:	ff cf       	rjmp	.-2      	; 0x3438 <__stop_program>
